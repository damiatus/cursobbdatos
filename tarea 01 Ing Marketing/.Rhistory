# Generar el gráfico de barras
ggplot(data = ingreso_agregados_cuarentena, aes(x = edad, y = ingreso, fill = factor_universidad)) +
geom_bar(stat = "identity", position = "dodge") +  # Gráfico de barras con posición esquivada
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso vs Edad por cuarentena",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
scale_fill_manual(values = c("0" = "red", "1" = "blue"))  # Color para universidad (0 y 1)
# Creamos los datos agregados de ingreso separados por edad y cuarentena
ingreso_agregados_cuarentena <- aggregate(ingreso ~ edad + cuarentena1, data = ventas, FUN = mean)
factor_universidad <- factor(ingreso_agregados_cuarentena$cuarentena1)
# Generar el gráfico de barras
ggplot(data = ingreso_agregados_cuarentena, aes(x = edad, y = ingreso, fill = factor_cuarentena)) +
geom_bar(stat = "identity", position = "dodge") +  # Gráfico de barras con posición esquivada
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso vs Edad por cuarentena",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
scale_fill_manual(values = c("0" = "red", "1" = "blue"))  # Color para universidad (0 y 1)
# Creamos los datos agregados de ingreso separados por edad y cuarentena
ingreso_agregados_cuarentena <- aggregate(ingreso ~ edad + cuarentena1, data = ventas, FUN = mean)
factor_cuarentena <- factor(ingreso_agregados_cuarentena$cuarentena1)
# Generar el gráfico de barras
ggplot(data = ingreso_agregados_cuarentena, aes(x = edad, y = ingreso, fill = factor_cuarentena)) +
geom_bar(stat = "identity", position = "dodge") +  # Gráfico de barras con posición esquivada
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso vs Edad por cuarentena",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
scale_fill_manual(values = c("0" = "red", "1" = "blue"))  # Color para universidad (0 y 1)
# Creamos los datos agregados de ingreso separados por edad y cuarentena
ingreso_agregados_cuarentena <- aggregate(ingreso ~ genero + cuarentena1, data = ventas, FUN = mean)
factor_cuarentena <- factor(ingreso_agregados_cuarentena$cuarentena1)
# Generar el gráfico de barras
ggplot(data = ingreso_agregados_cuarentena, aes(x = genero, y = ingreso, fill = factor_cuarentena)) +
geom_bar(stat = "identity", position = "dodge") +  # Gráfico de barras con posición esquivada
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso vs Edad por cuarentena (1 si hubo, 0 no)",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
scale_fill_manual(values = c("0" = "red", "1" = "blue"))  # Color para universidad (0 y 1)
# Creamos los datos agregados de ingreso separados por edad y cuarentena
ingreso_agregados_cuarentena <- aggregate(ingreso ~ genero + cuarentena1, data = ventas, FUN = mean)
factor_cuarentena <- factor(ingreso_agregados_cuarentena$cuarentena1)
# Generar el gráfico de barras
ggplot(data = ingreso_agregados_cuarentena, aes(x = genero, y = ingreso, fill = factor_cuarentena)) +
geom_bar(stat = "identity", position = "dodge") +  # Gráfico de barras con posición esquivada
labs(title = "Ingreso vs Edad por cuarentena (1 si hubo, 0 no)",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
scale_fill_manual(values = c("0" = "red", "1" = "blue"))  # Color para universidad (0 y 1)
# Creamos los datos agregados de ingreso separados por edad y cuarentena
ingreso_agregados_cuarentena <- aggregate(ingreso ~ genero + cuarentena1, data = ventas, FUN = mean)
factor_cuarentena <- factor(ingreso_agregados_cuarentena$cuarentena1)
# Generar el gráfico de barras
ggplot(data = ingreso_agregados_cuarentena, aes(x = genero, y = ingreso, fill = factor_cuarentena)) +
geom_bar(stat = "identity", position = "dodge") +  # Gráfico de barras con posición esquivada
labs(title = "Ingreso vs Genero por cuarentena (1 si hubo, 0 no)",
x = "Genero", y = "Ingreso") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
scale_fill_manual(values = c("0" = "red", "1" = "blue"))  # Color para universidad (0 y 1)
library(ggplot2)
# Creamos los datos agregados de ingreso separados por edad
ingreso_agregados <- aggregate(ingreso ~ edad + genero, data = ventas, FUN = mean)
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = factor(genero, labels = c("Hombre", "Mujer")), y = ingreso, color = factor(genero))) +
geom_line(size = 1) +
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso vs Género por Edad",
x = "Género", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +
scale_y_continuous(labels = scales::label_number(scale = 1e-0, suffix = "K")) +
theme(legend.title = element_blank())
# Creamos los datos agregados de ingreso separados por edad, genero y factor_cuarentena
ingreso_agregados <- aggregate(ingreso ~ edad + genero + factor_cuarentena, data = ventas, FUN = mean)
library(ggplot2)
# Creamos los datos agregados de ingreso separados por edad y genero
ingreso_agregados <- aggregate(ingreso ~ edad + genero + cuarentena1, data = ventas, FUN = mean)
# Generar el gráfico de barras con estilo modificado y etiquetas de eje X
ggplot(data = ingreso_agregados, aes(x = factor(genero), y = ingreso, fill = factor(cuarentena1))) +
geom_bar(stat = "identity", position = "dodge", color = "black", width = 0.6) +
labs(title = "Ingreso vs Género por Cuarentena",
x = "Género", y = "Ingreso") +
theme_minimal() +
scale_fill_manual(values = c("#F8766D", "#00BFC4")) +
scale_y_continuous(labels = scales::label_number(scale = 1e-0, suffix = "K")) +
theme(legend.title = element_blank()) +
scale_x_discrete(labels = c("Hombre", "Mujer"))  # Etiquetas personalizadas para eje X
# Creamos los datos agregados de ingreso separados por edad y cuarentena
ingreso_agregados_cuarentena <- aggregate(ingreso ~ genero + cuarentena1, data = ventas, FUN = mean)
factor_cuarentena <- factor(ingreso_agregados_cuarentena$cuarentena1)
# Generar el gráfico de barras
ggplot(data = ingreso_agregados_cuarentena, aes(x = genero, y = ingreso, fill = factor_cuarentena)) +
geom_bar(stat = "identity", position = "dodge") +  # Gráfico de barras con posición esquivada
labs(title = "Ingreso vs Genero por cuarentena (1 si hubo, 0 no)",
x = "Genero", y = "Ingreso") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
scale_x_discrete(labels = c("Hombre", "Mujer")) +
scale_fill_manual(values = c("0" = "red", "1" = "blue"))  # Color para genero (0 y 1)
# Creamos los datos agregados de ingreso separados por edad y cuarentena
ingreso_agregados_cuarentena <- aggregate(ingreso ~ genero + cuarentena1, data = ventas, FUN = mean)
factor_cuarentena <- factor(ingreso_agregados_cuarentena$cuarentena1)
# Generar el gráfico de barras
ggplot(data = ingreso_agregados_cuarentena, aes(x = genero, y = ingreso, fill = factor_cuarentena)) +
geom_bar(stat = "identity", position = "dodge") +  # Gráfico de barras con posición esquivada
labs(title = "Ingreso vs Genero por cuarentena (1 si hubo, 0 no)",
x = "Genero", y = "Ingreso") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
scale_fill_manual(values = c("0" = "red", "1" = "blue"))  # Color para genero (0 y 1)
# Creamos los datos agregados de ingreso separados por edad y cuarentena
ingreso_agregados_cuarentena <- aggregate(ingreso ~ genero + cuarentena1, data = ventas, FUN = mean)
factor_cuarentena <- factor(ingreso_agregados_cuarentena$cuarentena1)
# Generar el gráfico de barras
ggplot(data = ingreso_agregados_cuarentena, aes(x = genero, y = ingreso, fill = factor_cuarentena)) +
geom_bar(stat = "identity", position = "dodge") +  # Gráfico de barras con posición esquivada
labs(title = "Ingreso vs Genero (1=mujer, 0=hombre) por cuarentena (1 si hubo, 0 no)",
x = "Genero", y = "Ingreso") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
scale_fill_manual(values = c("0" = "red", "1" = "blue"))  # Color para genero (0 y 1)
# Creamos los datos agregados de ingreso separados por edad
ingreso_agregados <- aggregate(ingreso_h ~ edad + genero, data = ventas, FUN = mean)
# Creamos los datos agregados de ingreso separados por edad
ingreso_agregados <- aggregate(ingreso_hr ~ edad + genero, data = ventas, FUN = mean)
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso_hr, color = factor(genero))) +
geom_line(size = 1) +  # Usamos geom_line en lugar de geom_bar
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso/h vs Edad por Sexo (0 hombre, 1 mujer)",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +  # Colores personalizados para 0 y 1
scale_y_continuous(labels = scales::label_number(scale = 1e-0, suffix = "K")) +
theme(legend.title = element_blank())  # Eliminamos título de la leyenda
# Creamos los datos agregados de ingreso separados por edad
ingreso_agregados <- aggregate(ingreso_hr ~ edad + genero, data = ventas, FUN = mean)
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso_hr, color = factor(genero))) +
geom_line(size = 1) +  # Usamos geom_line en lugar de geom_bar
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso/h vs Edad por Sexo (0 hombre, 1 mujer)",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +  # Colores personalizados para 0 y 1
theme(legend.title = element_blank())  # Eliminamos título de la leyenda
# Creamos los datos agregados de ingreso separados por edad
ingreso_agregados <- aggregate(hrs_diarias ~ edad + genero, data = ventas, FUN = mean)
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = hrs_diarias, color = factor(genero))) +
geom_line(size = 1) +  # Usamos geom_line en lugar de geom_bar
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Horas trabajadas vs Edad por Sexo (0 hombre, 1 mujer)",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +  # Colores personalizados para 0 y 1
theme(legend.title = element_blank())  # Eliminamos título de la leyenda
# Creamos los datos agregados de ingreso separados por edad
ingreso_agregados <- aggregate(hrs_diarias ~ edad + genero, data = ventas, FUN = mean)
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = hrs_diarias, color = factor(genero))) +
geom_line(size = 1) +  # Usamos geom_line en lugar de geom_bar
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Horas trabajadas vs Edad por Sexo (0 hombre, 1 mujer)",
x = "Edad", y = "Horas") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +  # Colores personalizados para 0 y 1
theme(legend.title = element_blank())  # Eliminamos título de la leyenda
library(ggplot2)
# Calcular las medias de horas trabajadas por género
medias_horas_por_genero <- aggregate(hrs_diarias ~ genero, data = ventas, FUN = mean)
# Generar el gráfico de barras
ggplot(data = medias_horas_por_genero, aes(x = factor(genero), y = hrs_diarias, fill = factor(genero))) +
geom_bar(stat = "identity", color = "black", width = 0.6) +
labs(title = "Promedio de Horas Trabajadas por Género",
x = "Género", y = "Horas Trabajadas (Promedio)") +
theme_minimal() +
scale_fill_manual(values = c("#00BFC4", "#F8766D")) +
theme(legend.title = element_blank()) +
scale_x_discrete(labels = c("Hombre", "Mujer"))  # Etiquetas personalizadas para eje X
# Cálculo de horas promedio trabajadas por hombres y mujeres
horas_promedio <- aggregate(hrs_diarias ~ genero, data = ventas, FUN = mean)
# Renombrar los valores de genero para que sean más descriptivos
horas_promedio$genero <- ifelse(horas_promedio$genero == 0, "Hombre", "Mujer")
# Imprimir los resultados
print(horas_promedio)
# Cálculo de horas promedio trabajadas por hombres y mujeres
horas_promedio <- aggregate(hrs_diarias ~ genero, data = ventas, FUN = mean)
# Renombrar los valores de genero para que sean más descriptivos
horas_promedio$genero <- ifelse(horas_promedio$genero == 0, "Hombre", "Mujer")
# Formatear los valores en notación estándar
horas_promedio$hrs_diarias <- format(horas_promedio$hrs_diarias, nsmall = 2, big.mark = ",", decimal.mark = ".")
# Imprimir los resultados
print(horas_promedio)
# Cálculo de horas promedio trabajadas por hombres y mujeres
horas_promedio <- aggregate(hrs_diarias ~ genero, data = ventas, FUN = mean)
# Renombrar los valores de genero para que sean más descriptivos
horas_promedio$genero <- ifelse(horas_promedio$genero == 0, "Hombre", "Mujer")
# Formatear las horas promedio en notación estándar
horas_promedio$hrs_diarias <- format(horas_promedio$hrs_diarias, big.mark = ",")
# Imprimir los resultados
print(horas_promedio)
# Cálculo de horas promedio trabajadas por hombres y mujeres en notación decimal
horas_promedio_decimal <- aggregate(hrs_diarias ~ genero, data = ventas, FUN = function(x) mean(x) / 60)
# Renombrar los valores de genero para que sean más descriptivos
horas_promedio_decimal$genero <- ifelse(horas_promedio_decimal$genero == 0, "Hombre", "Mujer")
# Imprimir los resultados en notación decimal
print(horas_promedio_decimal)
# Cálculo de horas promedio trabajadas por hombres y mujeres
horas_promedio <- aggregate(hrs_diarias ~ genero, data = ventas, FUN = mean)
# Renombrar los valores de genero para que sean más descriptivos
horas_promedio$genero <- ifelse(horas_promedio$genero == 0, "Hombre", "Mujer")
# Formatear las horas promedio en notación estándar
horas_promedio$hrs_diarias <- format(horas_promedio$hrs_diarias, big.mark = ",")
# Imprimir los resultados
print(horas_promedio)
# Cálculo de horas promedio trabajadas por hombres y mujeres
horas_promedio <- aggregate(hrs_diarias(scale = 1e-6, suffix = "M") ~ genero, data = ventas, FUN = mean)
# Cálculo de horas promedio trabajadas por hombres y mujeres
horas_promedio <- aggregate(hrs_diarias ~ genero, data = ventas, FUN = mean)
# Renombrar los valores de genero para que sean más descriptivos
horas_promedio$genero <- ifelse(horas_promedio$genero == 0, "Hombre", "Mujer")
# Imprimir los resultados
print(horas_promedio)
# Obtener la tabla de frecuencias de edad
tabla_frecuencias_edad <- table(ventas$hrs_diarias)
# Imprimir la tabla de frecuencias
#tabla_frecuencias_edad
# Suponiendo que tienes la tabla de frecuencias tabla_frecuencias_edad
# Convertir la tabla de frecuencias en un vector
frecuencias <- as.vector(tabla_frecuencias_edad)
# Obtener los valores únicos de la columna de edad (nombres de las barras)
edades <- as.numeric(names(tabla_frecuencias_edad))
# Crear el gráfico de barras
barplot(frecuencias, names.arg = edades, xlab = "Edad", ylab = "Frecuencia",
main = "Gráfico de Frecuencia por Edad", col = "blue")
library(ggplot2)
# Creamos los datos agregados de ingreso separados por horas diarias trabajadas y genero
ingreso_agregados <- aggregate(ingreso ~ hrs_diarias + genero + cuarentena1, data = ventas, FUN = mean)
# Generar el gráfico de barras con estilo modificado y etiquetas de eje X
ggplot(data = ingreso_agregados, aes(x = factor(genero), y = ingreso, fill = factor(cuarentena1))) +
geom_bar(stat = "identity", position = "dodge", color = "black", width = 0.6) +
labs(title = "Ingreso vs Género por Cuarentena",
x = "Género", y = "Ingreso") +
theme_minimal() +
scale_fill_manual(values = c("#F8766D", "#00BFC4")) +
scale_y_continuous(labels = scales::label_number(scale = 1e-0, suffix = "K")) +
theme(legend.title = element_blank()) +
scale_x_discrete(labels = c("Hombre", "Mujer"))
# Obtener la tabla de frecuencias de horas diarias trabajadas
tabla_frecuencias_horas <- table(ventas$hrs_diarias)
# Imprimir la tabla de frecuencias
#tabla_frecuencias_horas
# Suponiendo que tienes la tabla de frecuencias tabla_frecuencias_horas
# Convertir la tabla de frecuencias en un vector
frecuencias <- as.vector(tabla_frecuencias_horas)
# Obtener los valores únicos de la columna de horas diarias trabajadas (nombres de las barras)
horas <- as.numeric(names(tabla_frecuencias_horas))
# Crear el gráfico de barras
barplot(frecuencias, names.arg = horas, xlab = "Horas Diarias Trabajadas", ylab = "Frecuencia",
main = "Gráfico de Frecuencia por Horas Diarias Trabajadas", col = "blue")
```{r}
# Obtener la tabla de frecuencias de horas diarias trabajadas
tabla_frecuencias_horas <- table(ventas$hrs_trabajados)
# Imprimir la tabla de frecuencias
#tabla_frecuencias_horas
# Suponiendo que tienes la tabla de frecuencias tabla_frecuencias_horas
# Convertir la tabla de frecuencias en un vector
frecuencias <- as.vector(tabla_frecuencias_horas)
# Obtener los valores únicos de la columna de horas diarias trabajadas (nombres de las barras)
horas <- as.numeric(names(tabla_frecuencias_horas))
# Crear el gráfico de barras
barplot(frecuencias, names.arg = horas, xlab = "Horas Diarias Trabajadas", ylab = "Frecuencia",
main = "Gráfico de Frecuencia por Horas Semanales Trabajadas", col = "blue")
# Obtener la tabla de frecuencias de horas diarias trabajadas
tabla_frecuencias_horas <- table(ventas$hrs_trabajadas)
# Imprimir la tabla de frecuencias
#tabla_frecuencias_horas
# Suponiendo que tienes la tabla de frecuencias tabla_frecuencias_horas
# Convertir la tabla de frecuencias en un vector
frecuencias <- as.vector(tabla_frecuencias_horas)
# Obtener los valores únicos de la columna de horas diarias trabajadas (nombres de las barras)
horas <- as.numeric(names(tabla_frecuencias_horas))
# Crear el gráfico de barras
barplot(frecuencias, names.arg = horas, xlab = "Horas Diarias Trabajadas", ylab = "Frecuencia",
main = "Gráfico de Frecuencia por Horas Semanales Trabajadas", col = "blue")
```{r}
# Creamos los datos agregados de ingreso separados por edad
ingreso_agregados <- aggregate(hrs_trabajados ~ edad + genero, data = ventas, FUN = mean)
# Creamos los datos agregados de ingreso separados por edad
ingreso_agregados <- aggregate(hrs_trabajadas ~ edad + genero, data = ventas, FUN = mean)
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = hrs_trabajadas, color = factor(genero))) +
geom_line(size = 1) +  # Usamos geom_line en lugar de geom_bar
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Horas semanales trabajadas vs Edad por Sexo (0 hombre, 1 mujer)",
x = "Edad", y = "Horas") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +  # Colores personalizados para 0 y 1
theme(legend.title = element_blank())  # Eliminamos título de la leyenda
calcular_promedio_ingreso <- function(data) {
promedio_hombres <- mean(data$ingreso[data$genero == 1], na.rm = TRUE)
promedio_mujeres <- mean(data$ingreso[data$genero == 0], na.rm = TRUE)
resultados <- data.frame(
Genero = c("Hombre", "Mujer"),
Promedio_Ingreso = c(promedio_hombres, promedio_mujeres)
)
return(resultados)
}
# Llamada a la función y obtención de resultados
resultados_promedio_ingreso <- calcular_promedio_ingreso(ventas)
print(resultados_promedio_ingreso)
calcular_promedio_ingreso <- function(data) {
promedio_mujeres <- mean(data$ingreso[data$genero == 1], na.rm = TRUE)
promedio_hombres <- mean(data$ingreso[data$genero == 0], na.rm = TRUE)
resultados <- data.frame(
Genero = c("Hombre", "Mujer"),
Promedio_Ingreso = c(promedio_hombres, promedio_mujeres)
)
return(resultados)
}
# Llamada a la función y obtención de resultados
resultados_promedio_ingreso <- calcular_promedio_ingreso(ventas)
print(resultados_promedio_ingreso)
summary(ventas$rubro)
skim(ventas$rubro)
table(ventas$rubro)
library(ggplot2)
# Creamos los datos agregados de ingreso separados por edad y genero
ingreso_agregados <- aggregate(ingreso ~ edad + genero + rubro, data = ventas, FUN = mean)
# Filtrar los casos donde el rubro sea "Alimentos y Abarrotes"
ingreso_agregados <- ingreso_agregados[ingreso_agregados$rubro == "Alimentos y Abarrotes", ]
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso, color = factor(genero))) +
geom_line(size = 1) +  # Usamos geom_line en lugar de geom_bar
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso total semanal vs Edad por Sexo (0 hombre, 1 mujer) - Rubro: Alimentos y Abarrotes",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +  # Colores personalizados para 0 y 1
scale_y_continuous(labels = scales::label_number(scale = 1e-0, suffix = "K")) +
theme(legend.title = element_blank())  # Eliminamos título de la leyenda
# Creamos los datos agregados de ingreso separados por edad y genero
ingreso_agregados <- aggregate(ingreso ~ edad + genero + rubro, data = ventas, FUN = mean)
# Filtrar los casos donde el rubro sea "Comida Rápida Oficios y Otros Servicios"
ingreso_agregados <- ingreso_agregados[ingreso_agregados$rubro == "Comida Rápida Oficios y Otros Servicios", ]
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso, color = factor(genero))) +
geom_line(size = 1) +
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso total semanal vs Edad por Sexo (0 hombre, 1 mujer) - Rubro: Comida Rápida Oficios y Otros Servicios",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +
scale_y_continuous(labels = scales::label_number(scale = 1e-0, suffix = "K")) +
theme(legend.title = element_blank())
library(ggplot2)
# Creamos los datos agregados de ingreso separados por edad y genero
ingreso_agregados <- aggregate(ingreso ~ edad + genero + rubro, data = ventas, FUN = mean)
# Filtrar los casos donde el rubro sea "Comida Rápida Oficios y Otros Servicios"
ingreso_agregados <- ingreso_agregados[ingreso_agregados$rubro == "Comida Rápida Oficios y Otros Servicios", ]
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso, color = factor(genero))) +
geom_line(size = 1) +
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso total semanal vs Edad por Sexo (0 hombre, 1 mujer) - Rubro: Comida Rápida Oficios y Otros Servicios",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +
scale_y_continuous(labels = scales::label_number(scale = 1e-0, suffix = "K")) +
theme(legend.title = element_blank())
# Creamos los datos agregados de ingreso separados por edad y genero
ingreso_agregados <- aggregate(ingreso ~ edad + genero + rubro, data = ventas, FUN = mean)
# Filtrar los casos donde el rubro sea "Comida Rápida Oficios y Otros Servicios"
ingreso_agregados <- ingreso_agregados[ingreso_agregados$rubro == "Retail", ]
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso, color = factor(genero))) +
geom_line(size = 1) +
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso total semanal vs Edad por Sexo (0 hombre, 1 mujer) - Rubro: Comida Rápida Oficios y Otros Servicios",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +
scale_y_continuous(labels = scales::label_number(scale = 1e-0, suffix = "K")) +
theme(legend.title = element_blank())
# Creamos los datos agregados de ingreso separados por edad y genero
ingreso_agregados <- aggregate(ingreso ~ edad + genero + rubro, data = ventas, FUN = mean)
# Filtrar los casos donde el rubro sea "Comida Rápida Oficios y Otros Servicios"
ingreso_agregados <- ingreso_agregados[ingreso_agregados$rubro == "Comida Rápida Oficios y Otros Servicios", ]
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso, color = factor(genero))) +
geom_line(size = 1) +
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso total semanal vs Edad por Sexo (0 hombre, 1 mujer) - Rubro: Comida Rápida Oficios y Otros Servicios",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +
scale_y_continuous(labels = scales::label_number(scale = 1e-0, suffix = "K")) +
theme(legend.title = element_blank())
library(ggplot2)
# Creamos los datos agregados de ingreso separados por edad y genero
ingreso_agregados <- aggregate(ingreso ~ edad + genero + rubro, data = ventas, FUN = mean)
# Filtrar los casos donde el rubro sea "retail"
ingreso_agregados <- ingreso_agregados[ingreso_agregados$rubro == "retail", ]
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso, color = factor(genero))) +
geom_line(size = 1) +
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso total semanal vs Edad por Sexo (0 hombre, 1 mujer) - Rubro: retail",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +
scale_y_continuous(labels = scales::label_number(scale = 1e-0, suffix = "K")) +
theme(legend.title = element_blank())
library(ggplot2)
# Creamos los datos agregados de ingreso separados por edad y genero
ingreso_agregados <- aggregate(ingreso ~ edad + genero + rubro, data = ventas, FUN = mean)
# Filtrar los casos donde el rubro sea "retail"
ingreso_agregados <- ingreso_agregados[ingreso_agregados$rubro == "Retail", ]
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso, color = factor(genero))) +
geom_line(size = 1) +
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso total semanal vs Edad por Sexo (0 hombre, 1 mujer) - Rubro: retail",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +
scale_y_continuous(labels = scales::label_number(scale = 1e-0, suffix = "K")) +
theme(legend.title = element_blank())
# Creamos los datos agregados de ingreso separados por edad y genero
ingreso_agregados <- aggregate(ingreso ~ edad + genero + rubro, data = ventas, FUN = mean)
# Filtrar los casos donde el rubro sea "Comida Rápida Oficios y Otros Servicios"
ingreso_agregados <- ingreso_agregados[ingreso_agregados$rubro == "Comida Rápida Oficios y Otros Servicios", ]
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso, color = factor(genero))) +
geom_line(size = 1) +
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso total semanal vs Edad por Sexo (0 hombre, 1 mujer) - Rubro: Comida Rápida Oficios y Otros Servicios",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +
scale_y_continuous(labels = scales::label_number(scale = 1e-0, suffix = "K")) +
theme(legend.title = element_blank())
library(ggplot2)
# Creamos los datos agregados de ingreso separados por edad y genero
ingreso_agregados <- aggregate(ingreso ~ edad + genero + rubro, data = ventas, FUN = mean)
# Filtrar los casos donde el rubro sea "Vestuario"
ingreso_agregados <- ingreso_agregados[ingreso_agregados$rubro == "Vestuario", ]
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso, color = factor(genero))) +
geom_line(size = 1) +
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso total semanal vs Edad por Sexo (0 hombre, 1 mujer) - Rubro: Vestuario",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +
scale_y_continuous(labels = scales::label_number(scale = 1e-0, suffix = "K")) +
theme(legend.title = element_blank())
ventas <- mersample
head(ventas)
ventas <- read.csv(mersample.csv)
ventas <- read.csv("mersample.csv")
ventas <- read.csv("mersample.csv", sep = ";")
head(ventas)
# Creamos los datos agregados de ingreso separados por edad
ingreso_agregados <- aggregate(ingreso_hr ~ edad + genero, data = ventas, FUN = mean)
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso_hr, color = factor(genero))) +
# Usamos geom_line en lugar de geom_bar
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso/h vs Edad por Sexo (0 hombre, 1 mujer)",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +  # Colores personalizados para 0 y 1
theme(legend.title = element_blank())  # Eliminamos título de la leyenda
# Creamos los datos agregados de ingreso separados por edad
ingreso_agregados <- aggregate(ingreso_hr ~ edad + genero, data = ventas, FUN = mean)
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso_hr, color = factor(genero))) +
geom_line(size = 1) +  # Usamos geom_line en lugar de geom_bar
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso/h vs Edad por Sexo (0 hombre, 1 mujer)",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +  # Colores personalizados para 0 y 1
theme(legend.title = element_blank())  # Eliminamos título de la leyenda
skim(ventas)
# Crear el gráfico de distribución
ggplot(data = ventas, aes(x = ingreso)) +
geom_histogram(binwidth = 25000, fill = "blue", color = "black") +
labs(title = "Distribución de Ingresos", x = "Ingresos", y = "Frecuencia")
# Calcular los límites de los bigotes (whiskers) para definir los outliers
q1 <- quantile(ventas$ingreso, 0.25)
q3 <- quantile(ventas$ingreso, 0.75)
iqr <- q3 - q1
lower_fence <- q1 - 1.5 * iqr
upper_fence <- q3 + 1.5 * iqr
# Filtrar los datos para excluir los outliers
ventas_filtradas <- ventas %>% filter(ingreso >= lower_fence, ingreso <= upper_fence)
# Crear el gráfico de distribución sin outliers
ggplot(data = ventas_filtradas, aes(x = ingreso)) +
geom_histogram(binwidth = 25000, fill = "blue", color = "black") +
scale_x_continuous(labels = scales::label_number(scale = 1e-0, suffix = " Mil"))  +
labs(title = "Distribución de Ingresos (Sin Outliers)", x = "Ingresos", y = "Frecuencia")
