# Mostrar el promedio de ingreso para Mujeres
cat("Los hombres trabajan en promedio" , promedio_semanal_hombres,"horas a la semana", "\n")
promedio_semanal_mujeres <- mean(ventas$hrs_trabajadas[ventas$genero == 1], na.rm = TRUE)
# Mostrar el promedio de ingreso para Mujeres
cat("Las mujeres trabajan en promedio" , promedio_semanal_mujeres,"horas a la semana", "\n")
diff_horas_genero <- ((promedio_semanal_hombres-promedio_semanal_mujeres)*100)/promedio_semanal_mujeres
cat("Los hombres trabajan en promedio" , diff_horas_genero ,"horas", "más que las mujeres a la semana", "\n")
# Agregamos por horas semanales trabajdas pore edad
promedios_ventas_hora <- aggregate(ingreso_hr ~ edad + genero, data = ventas, FUN = mean)
# Renombrar la columna "hrs_diarias" a "promedio_horas"
colnames(promedios_ventas_hora) <- c("edad", "genero", "promedio_ingreso_hr")
# Mostrar la tabla resultante
print(promedios_ventas_hora)
ggplot(promedios_ventas_hora, aes(x = edad, y = promedio_ingreso_hr, color = factor(genero))) +
ggtitle("Promedio de Horas Semanales Trabajadas por Edad y Género") +
xlab("Edad") +
ylab("Promedio Horas Diarias Trabajadas") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"), labels = c("Hombre", "Mujer")) +
theme_minimal()
View(promedios_ventas_hora)
View(ventas)
mersample$hrs_diarias <- as.integer(mersample$hrs_diarias,mersample$ingres_hr, mersample$seamana_año, mersample$transacciones_hr, mersample$ingreso_hr)
mersample$hrs_diarias <- as.integer(mersample$ingreso_hr)
View(mersample)
countna(mersample)
colSums(is.na(mersample))
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())  # Esto eliminará todas las variables del entorno
#install.packages("skimr")
#install.packages("tinytex")
#install.packages("DT")
#install.packages("kableExtra")
#install.packages("reticulate")
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("kableExtra")
#install.packages("gt")
#install.packages("xtable")
library(gt)
library(tinytex)
#library(kableExtra)
library(reticulate)
library(ggplot2)
library(dplyr)
library(scales)
library(skimr)
library(lubridate)
library(stats)
library(DT)
library(tidyr)
set.seed(123)
#setwd("//wsl$/Ubuntu-22.04/root/home/damiatus/cursobbdatos/tarea 01 Ing Marketing") #Seteamos el directorio de trabajo local
mersample <- read.csv("mersample.csv", sep = ";", encoding = "UTF-8")
head(mersample)
options(skimr_options = list(width = 10))
skim(mersample)
colSums(is.na(mersample))
mersample$hrs_diarias <- as.integer(mersample$hrs_diarias,mersample$ingres_hr, mersample$seamana_año, mersample$transacciones_hr, mersample$ingreso_hr)
mersample$hrs_diarias <- as.integer(mersample$ingreso_hr)
options(skimr_options = list(width = 10))
skim(mersample)
mersample <- read.csv("mersample.csv", sep = ";", encoding = "UTF-8")
head(mersample)
options(skimr_options = list(width = 10))
skim(mersample)
colSums(is.na(mersample))
View(mersample)
#mersample$hrs_diarias <- as.integer(mersample$hrs_diarias,mersample$ingres_hr, mersample$seamana_año, mersample$transacciones_hr, mersample$ingreso_hr)
mersample$hrs_diarias <- as.integer(mersample$ingreso_hr)
mersample <- read.csv("mersample.csv", sep = ";", encoding = "UTF-8")
head(mersample)
#mersample$hrs_diarias <- as.integer(mersample$hrs_diarias,mersample$ingres_hr, mersample$seamana_año, mersample$transacciones_hr, mersample$ingreso_hr)
mersample2 <-  mersample$hrs_diarias <- as.integer(mersample$ingreso_hr)
#mersample$hrs_diarias <- as.integer(mersample$hrs_diarias,mersample$ingres_hr, mersample$seamana_año, mersample$transacciones_hr, mersample$ingreso_hr)
mersample2 <- (mersample$hrs_diarias <- as.integer(mersample$ingreso_hr))
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())  # Esto eliminará todas las variables del entorno
#install.packages("skimr")
#install.packages("tinytex")
#install.packages("DT")
#install.packages("kableExtra")
#install.packages("reticulate")
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("kableExtra")
#install.packages("gt")
#install.packages("xtable")
library(gt)
library(tinytex)
#library(kableExtra)
library(reticulate)
library(ggplot2)
library(dplyr)
library(scales)
library(skimr)
library(lubridate)
library(stats)
library(DT)
library(tidyr)
set.seed(123)
#setwd("//wsl$/Ubuntu-22.04/root/home/damiatus/cursobbdatos/tarea 01 Ing Marketing") #Seteamos el directorio de trabajo local
mersample <- read.csv("mersample.csv", sep = ";", encoding = "UTF-8")
head(mersample)
options(skimr_options = list(width = 10))
skim(mersample)
colSums(is.na(mersample))
#mersample$hrs_diarias <- as.integer(mersample$hrs_diarias,mersample$ingres_hr, mersample$seamana_año, mersample$transacciones_hr, mersample$ingreso_hr)
mersample2 <- mersample
mersample2$hrs_diarias <- as.integer(mersample2$ingreso_hr))
View(mersample2)
View(mersample)
mersample2$hrs_diarias <- as.integer(mersample2$ingreso_hr)
mersample2$hrs_diarias <- as.integer(mersample2$hrs_diarias)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())  # Esto eliminará todas las variables del entorno
#install.packages("skimr")
#install.packages("tinytex")
#install.packages("DT")
#install.packages("kableExtra")
#install.packages("reticulate")
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("kableExtra")
#install.packages("gt")
#install.packages("xtable")
library(gt)
library(tinytex)
#library(kableExtra)
library(reticulate)
library(ggplot2)
library(dplyr)
library(scales)
library(skimr)
library(lubridate)
library(stats)
library(DT)
library(tidyr)
set.seed(123)
#setwd("//wsl$/Ubuntu-22.04/root/home/damiatus/cursobbdatos/tarea 01 Ing Marketing") #Seteamos el directorio de trabajo local
mersample <- read.csv("mersample.csv", sep = ";", encoding = "UTF-8")
head(mersample)
options(skimr_options = list(width = 10))
skim(mersample)
colSums(is.na(mersample))
#mersample$hrs_diarias <- as.integer(mersample$hrs_diarias,mersample$ingres_hr, mersample$seamana_año, mersample$transacciones_hr, mersample$ingreso_hr)
mersample2 <- mersample
mersample2$hrs_diarias <- as.integer(mersample2$hrs_diarias)
View(mersample)
View(mersample2)
mersample <- read.csv("mersample.csv", sep = ";", encoding = "UTF-8")
head(mersample)
mersample <- as.numeric(gsub(",", ".", mersample))
options(skimr_options = list(width = 10))
skim(mersample)
mersample <- read.csv("mersample.csv", sep = ";", encoding = "UTF-8")
head(mersample)
mersample$hrs_diarias <- as.numeric(gsub(",", ".", mersample$hrs_diarias))
mersample$transacciones_hr <- as.numeric(gsub(",", ".", mersample$transacciones_hr))
mersample$ingreso_hr <- as.numeric(gsub(",", ".", mersample$ingreso_hr))
View(mersample)
options(skimr_options = list(width = 10))
skim(mersample)
head(mersample)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())  # Esto eliminará todas las variables del entorno
#install.packages("skimr")
#install.packages("tinytex")
#install.packages("DT")
#install.packages("kableExtra")
#install.packages("reticulate")
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("kableExtra")
#install.packages("gt")
#install.packages("xtable")
library(gt)
library(tinytex)
#library(kableExtra)
library(reticulate)
library(ggplot2)
library(dplyr)
library(scales)
library(skimr)
library(lubridate)
library(stats)
library(DT)
library(tidyr)
set.seed(123)
#setwd("//wsl$/Ubuntu-22.04/root/home/damiatus/cursobbdatos/tarea 01 Ing Marketing") #Seteamos el directorio de trabajo local
mersample <- read.csv("mersample.csv", sep = ";", encoding = "UTF-8")
head(mersample)
mersample$hrs_diarias <- as.numeric(gsub(",", ".", mersample$hrs_diarias))
mersample$transacciones_hr <- as.numeric(gsub(",", ".", mersample$transacciones_hr))
mersample$ingreso_hr <- as.numeric(gsub(",", ".", mersample$ingreso_hr))
options(skimr_options = list(width = 10))
skim(mersample)
colSums(is.na(mersample))
#mersample$hrs_diarias <- as.integer(mersample$hrs_diarias,mersample$ingres_hr, mersample$seamana_año, mersample$transacciones_hr, mersample$ingreso_hr)
#mersample2 <- mersample
#mersample2$hrs_diarias <- as.integer(mersample2$hrs_diarias)
# Crear un histograma de los ingresos
hist(mersample$ingreso, main = "Distribución de Ingresos", xlab = "Ingresos", ylab = "Frecuencia")
# Eliminar filas con ingresos superiores a $1,000,000
ventas <- mersample[mersample$ingreso <= 1000000, ]
# Crear un histograma con el eje X en notación decimal
ggplot(ventas, aes(x = ingreso)) +
geom_histogram(binwidth = 10000, fill = "blue", color = "black") +
labs(title = "Distribución de Ingresos (Menos de $1,000,000)",
x = "Ingresos", y = "Frecuencia") +
scale_x_continuous(labels = scales::comma) # Utiliza notación decimal
# Calcular el promedio de ingresos por edad y género
ingresos_promedio <- ventas %>%
group_by(edad, genero) %>%
summarize(ingreso_promedio = mean(ingreso))
# Crear un gráfico de líneas
ggplot(ingresos_promedio, aes(x = edad, y = ingreso_promedio, color = factor(genero))) +
geom_line(aes(group = genero)) +
labs(title = "Ingreso Promedio por Edad y Género",
x = "Edad", y = "Ingreso Promedio") +
scale_color_discrete(name = "Género", labels = c("Hombre", "Mujer")) +
theme_minimal()
ggplot(ingresos_promedio, aes(x = edad, y = ingreso_promedio, color = factor(genero))) +
ggtitle("Ingreso Promedio por Edad y Género") +
xlab("Edad") +
ylab("Ingreso Promedio") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"),name = "Género", labels = c("Hombre", "Mujer")) +
theme_minimal()
set.seed(54)
x <- ingresos_promedio$edad
y <- ingresos_promedio$ingreso_promedio
genero <- ingresos_promedio$genero
# Gráfico de dispersión con regresión suavizada y control por género
plot(x[genero == 0], y[genero == 0], pch = 1, col = "blue", xlab = "Edad", ylab = "Ingreso Promedio")
points(x[genero == 1], y[genero == 1], pch = 1, col = "red")
lines(lowess(x[genero == 0], y[genero == 0]), col = "blue", lwd = 2)
lines(lowess(x[genero == 1], y[genero == 1]), col = "red", lwd = 2)
# Leyenda
legend(x = "topright", legend = c("Hombre", "Mujer"), col = c("blue", "red"), pch = 16, title = "Género")
# Título del gráfico
title(main = "Ingreso agregado por edad con Regresión Suavizada")
# Gráfico con ggplot2 que muestra líneas de intervalos de confianza con colores diferentes por género
ggplot(ingresos_promedio, aes(x = edad, y = ingreso_promedio, color = factor(genero), fill = factor(genero))) +
ggtitle("Ingreso promedio agregado por edad") +
xlab("Edad") +
ylab("Ingreso Promedio") +
geom_smooth(method = "lm", se = TRUE) +
scale_color_manual(values = c("blue","red"), labels = c("Hombre", "Mujer")) +  # Etiquetas de los colores
scale_fill_manual(values = c("blue","red"), labels = c("Hombre", "Mujer")) +    # Etiquetas de los colores
labs(color = "Género", fill = "Género") +  # Cambio de nombres de las leyendas de colores
theme_minimal()
# Gráfico con ggplot2 que muestra líneas de intervalos de confianza con colores diferentes por género
ggplot(ventas, aes(x = edad, y = ingreso, color = factor(genero), fill = factor(genero))) +
ggtitle("Ingreso promedio por edad ") +
xlab("Edad") +
ylab("Ingreso Promedio") +
geom_smooth(method = "lm", se = TRUE) +
scale_color_manual(values = c("blue","red"), labels = c("Hombre", "Mujer")) +  # Etiquetas de los colores
scale_fill_manual(values = c("blue","red"), labels = c("Hombre", "Mujer")) +    # Etiquetas de los colores
labs(color = "Género", fill = "Género") +  # Cambio de nombres de las leyendas de colores
theme_minimal()
promedio_hombres <- mean(ventas$ingreso[ventas$genero == 0], na.rm = TRUE)
# Mostrar el promedio de ingreso para Mujeres
cat("El ingreso promedio entre hombres es:" , promedio_hombres, "\n")
promedio_mujeres <- mean(ventas$ingreso[ventas$genero == 1], na.rm = TRUE)
# Mostrar el promedio de ingreso para Mujeres
cat("El ingreso promedio entre muejres es:" , promedio_mujeres, "\n")
promedio_hombres <- mean(ventas$ingreso[ventas$genero == 0], na.rm = TRUE)
diff_genero <- ((promedio_hombres-promedio_mujeres)*100)/promedio_mujeres
cat("Los hombres ganan en promedio:" , diff_genero ,"%", "más que las mujeres", "\n")
# Agregamos por horas diarias trabajdas pore edad
promedios_horas_dia <- aggregate(hrs_diarias ~ edad + genero, data = ventas, FUN = mean)
# Renombrar la columna "hrs_diarias" a "promedio_horas"
colnames(promedios_horas_dia) <- c("edad", "genero", "promedio_horas_dia")
# Mostrar la tabla resultante
print(promedios_horas_dia)
ggplot(promedios_horas_dia, aes(x = edad, y = promedio_horas_dia, color = factor(genero))) +
ggtitle("Promedio de Horas Diarias Trabajadas por Edad y Género") +
xlab("Edad") +
ylab("Promedio Horas Diarias Trabajadas") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"), labels = c("Hombre", "Mujer")) +
theme_minimal()
# Agregamos por horas semanales trabajdas pore edad
promedios_horas_semana <- aggregate(hrs_trabajadas ~ edad + genero, data = ventas, FUN = mean)
# Renombrar la columna "hrs_diarias" a "promedio_horas"
colnames(promedios_horas_semana) <- c("edad", "genero", "promedio_horas_semana")
# Mostrar la tabla resultante
print(promedios_horas_semana)
ggplot(promedios_horas_semana, aes(x = edad, y = promedio_horas_semana, color = factor(genero))) +
ggtitle("Promedio de Horas Semanales Trabajadas por Edad y Género") +
xlab("Edad") +
ylab("Promedio Horas Diarias Trabajadas") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"), labels = c("Hombre", "Mujer")) +
theme_minimal()
promedio_semanal_hombres <- mean(ventas$hrs_trabajadas[ventas$genero == 0], na.rm = TRUE)
# Mostrar el promedio de ingreso para Mujeres
cat("Los hombres trabajan en promedio" , promedio_semanal_hombres,"horas a la semana", "\n")
promedio_semanal_mujeres <- mean(ventas$hrs_trabajadas[ventas$genero == 1], na.rm = TRUE)
# Mostrar el promedio de ingreso para Mujeres
cat("Las mujeres trabajan en promedio" , promedio_semanal_mujeres,"horas a la semana", "\n")
diff_horas_genero <- ((promedio_semanal_hombres-promedio_semanal_mujeres)*100)/promedio_semanal_mujeres
cat("Los hombres trabajan en promedio" , diff_horas_genero ,"horas", "más que las mujeres a la semana", "\n")
# Agregamos por horas semanales trabajdas pore edad
promedios_ventas_hora <- aggregate(ingreso_hr ~ edad + genero, data = ventas, FUN = mean)
# Renombrar la columna "hrs_diarias" a "promedio_horas"
colnames(promedios_ventas_hora) <- c("edad", "genero", "promedio_ingreso_hr")
# Mostrar la tabla resultante
print(promedios_ventas_hora)
ggplot(promedios_ventas_hora, aes(x = edad, y = promedio_ingreso_hr, color = factor(genero))) +
ggtitle("Promedio de Horas Semanales Trabajadas por Edad y Género") +
xlab("Edad") +
ylab("Promedio Horas Diarias Trabajadas") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"), labels = c("Hombre", "Mujer")) +
theme_minimal()
# Agregamos por horas semanales trabajdas pore edad
promedios_ventas_hora <- aggregate(ingreso_hr ~ edad + genero, data = ventas, FUN = mean)
# Renombrar la columna "hrs_diarias" a "promedio_horas"
colnames(promedios_ventas_hora) <- c("edad", "genero", "promedio_ingreso_hr")
# Mostrar la tabla resultante
print(promedios_ventas_hora)
ggplot(promedios_ventas_hora, aes(x = edad, y = promedio_ingreso_hr, color = factor(genero))) +
ggtitle("Promedio ingresos por hora por Edad y Género") +
xlab("Edad") +
ylab("Promedio ingreso por hora") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"), labels = c("Hombre", "Mujer")) +
theme_minimal()
# Agregamos por horas semanales trabajdas pore edad
promedios_ventas_hora <- aggregate(ingreso_hr ~ edad + genero, data = ventas, FUN = mean)
# Renombrar la columna "hrs_diarias" a "promedio_horas"
colnames(promedios_ventas_hora) <- c("edad", "genero", "promedio_ingreso_hr")
# Mostrar la tabla resultante
print(promedios_ventas_hora)
ggplot(promedios_ventas_hora, aes(x = edad, y = promedio_ingreso_hr, color = factor(genero))) +
ggtitle("Promedio ingresos por hora por Edad y Género") +
xlab("Edad") +
ylab("Ingreso por hora") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"), labels = c("Hombre", "Mujer")) +
theme_minimal()
View(mersample)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())  # Esto eliminará todas las variables del entorno
#install.packages("skimr")
#install.packages("tinytex")
#install.packages("DT")
#install.packages("kableExtra")
#install.packages("reticulate")
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("kableExtra")
#install.packages("gt")
#install.packages("xtable")
library(gt)
library(tinytex)
#library(kableExtra)
library(reticulate)
library(ggplot2)
library(dplyr)
library(scales)
library(skimr)
library(lubridate)
library(stats)
library(DT)
library(tidyr)
set.seed(123)
#setwd("//wsl$/Ubuntu-22.04/root/home/damiatus/cursobbdatos/tarea 01 Ing Marketing") #Seteamos el directorio de trabajo local
mersample <- read.csv("mersample.csv", sep = ";", encoding = "UTF-8")
head(mersample)
mersample$hrs_diarias <- as.numeric(gsub(",", ".", mersample$hrs_diarias))
mersample$transacciones_hr <- as.numeric(gsub(",", ".", mersample$transacciones_hr))
mersample$ingreso_hr <- as.numeric(gsub(",", ".", mersample$ingreso_hr))
options(skimr_options = list(width = 10))
skim(mersample)
# Crear un histograma de los ingresos
hist(mersample$ingreso, main = "Distribución de Ingresos", xlab = "Ingresos", ylab = "Frecuencia")
# Eliminar filas con ingresos superiores a $1,000,000
ventas <- mersample[mersample$ingreso <= 1000000, ]
# Crear un histograma con el eje X en notación decimal
ggplot(ventas, aes(x = ingreso)) +
geom_histogram(binwidth = 10000, fill = "blue", color = "black") +
labs(title = "Distribución de Ingresos (Menos de $1,000,000)",
x = "Ingresos", y = "Frecuencia") +
scale_x_continuous(labels = scales::comma) # Utiliza notación decimal
# Calcular el promedio de ingresos por edad y género
ingresos_promedio <- ventas %>%
group_by(edad, genero) %>%
summarize(ingreso_promedio = mean(ingreso))
# Crear un gráfico de líneas
ggplot(ingresos_promedio, aes(x = edad, y = ingreso_promedio, color = factor(genero))) +
geom_line(aes(group = genero)) +
labs(title = "Ingreso Promedio por Edad y Género",
x = "Edad", y = "Ingreso Promedio") +
scale_color_discrete(name = "Género", labels = c("Hombre", "Mujer")) +
theme_minimal()
ggplot(ingresos_promedio, aes(x = edad, y = ingreso_promedio, color = factor(genero))) +
ggtitle("Ingreso Promedio por Edad y Género regresionado") +
xlab("Edad") +
ylab("Ingreso Promedio") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"),name = "Género", labels = c("Hombre", "Mujer")) +
theme_minimal()
set.seed(54)
x <- ingresos_promedio$edad
y <- ingresos_promedio$ingreso_promedio
genero <- ingresos_promedio$genero
# Gráfico de dispersión con regresión suavizada y control por género
plot(x[genero == 0], y[genero == 0], pch = 1, col = "blue", xlab = "Edad", ylab = "Ingreso Promedio")
points(x[genero == 1], y[genero == 1], pch = 1, col = "red")
lines(lowess(x[genero == 0], y[genero == 0]), col = "blue", lwd = 2)
lines(lowess(x[genero == 1], y[genero == 1]), col = "red", lwd = 2)
# Leyenda
legend(x = "topright", legend = c("Hombre", "Mujer"), col = c("blue", "red"), pch = 16, title = "Género")
# Título del gráfico
title(main = "Ingreso agregado por edad con Regresión Suavizada")
# Gráfico con ggplot2 que muestra líneas de intervalos de confianza con colores diferentes por género
ggplot(ingresos_promedio, aes(x = edad, y = ingreso_promedio, color = factor(genero), fill = factor(genero))) +
ggtitle("Ingreso promedio agregado por edad c/dispersion") +
xlab("Edad") +
ylab("Ingreso Promedio") +
geom_smooth(method = "lm", se = TRUE) +
scale_color_manual(values = c("blue","red"), labels = c("Hombre", "Mujer")) +  # Etiquetas de los colores
scale_fill_manual(values = c("blue","red"), labels = c("Hombre", "Mujer")) +    # Etiquetas de los colores
labs(color = "Género", fill = "Género") +  # Cambio de nombres de las leyendas de colores
theme_minimal()
# Gráfico con ggplot2 que muestra líneas de intervalos de confianza con colores diferentes por género
ggplot(ventas, aes(x = edad, y = ingreso, color = factor(genero), fill = factor(genero))) +
ggtitle("Ingreso promedio por edad c/dispersion") +
xlab("Edad") +
ylab("Ingreso Promedio") +
geom_smooth(method = "lm", se = TRUE) +
scale_color_manual(values = c("blue","red"), labels = c("Hombre", "Mujer")) +  # Etiquetas de los colores
scale_fill_manual(values = c("blue","red"), labels = c("Hombre", "Mujer")) +    # Etiquetas de los colores
labs(color = "Género", fill = "Género") +  # Cambio de nombres de las leyendas de colores
theme_minimal()
promedio_hombres <- mean(ventas$ingreso[ventas$genero == 0], na.rm = TRUE)
# Mostrar el promedio de ingreso para Mujeres
cat("El ingreso promedio entre hombres es:" , promedio_hombres, "\n")
promedio_mujeres <- mean(ventas$ingreso[ventas$genero == 1], na.rm = TRUE)
# Mostrar el promedio de ingreso para Mujeres
cat("El ingreso promedio entre muejres es:" , promedio_mujeres, "\n")
promedio_hombres <- mean(ventas$ingreso[ventas$genero == 0], na.rm = TRUE)
diff_genero <- ((promedio_hombres-promedio_mujeres)*100)/promedio_mujeres
cat("Los hombres ganan en promedio:" , diff_genero ,"%", "más que las mujeres", "\n")
# Agregamos por horas diarias trabajdas pore edad
promedios_horas_dia <- aggregate(hrs_diarias ~ edad + genero, data = ventas, FUN = mean)
# Renombrar la columna "hrs_diarias" a "promedio_horas"
colnames(promedios_horas_dia) <- c("edad", "genero", "promedio_horas_dia")
# Mostrar la tabla resultante
print(promedios_horas_dia)
ggplot(promedios_horas_dia, aes(x = edad, y = promedio_horas_dia, color = factor(genero))) +
ggtitle("Promedio de Horas Diarias Trabajadas por Edad y Género") +
xlab("Edad") +
ylab("Promedio Horas Diarias Trabajadas") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"), labels = c("Hombre", "Mujer")) +
theme_minimal()
# Agregamos por horas semanales trabajdas pore edad
promedios_ventas_hora <- aggregate(ingreso_hr ~ edad + genero, data = ventas, FUN = mean)
# Renombrar la columna "hrs_diarias" a "promedio_horas"
colnames(promedios_ventas_hora) <- c("edad", "genero", "promedio_ingreso_hr")
# Mostrar la tabla resultante
print(promedios_ventas_hora)
ggplot(promedios_ventas_hora, aes(x = edad, y = promedio_ingreso_hr, color = factor(genero))) +
ggtitle("Promedio ingresos por hora por Edad y Género") +
xlab("Edad") +
ylab("Ingreso por hora") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"), labels = c("Hombre", "Mujer")) +
theme_minimal()
# Agregamos por horas semanales trabajdas pore edad
promedios_horas_semana <- aggregate(hrs_trabajadas ~ edad + genero, data = ventas, FUN = mean)
# Renombrar la columna "hrs_diarias" a "promedio_horas"
colnames(promedios_horas_semana) <- c("edad", "genero", "promedio_horas_semana")
# Mostrar la tabla resultante
print(promedios_horas_semana)
ggplot(promedios_horas_semana, aes(x = edad, y = promedio_horas_semana, color = factor(genero))) +
ggtitle("Promedio de Horas Semanales Trabajadas por Edad y Género") +
xlab("Edad") +
ylab("Promedio Horas Diarias Trabajadas") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"), labels = c("Hombre", "Mujer")) +
theme_minimal()
# Agregamos por horas semanales trabajdas pore edad
promedios_ventas_semana <- aggregate(ingreso ~ edad + genero, data = ventas, FUN = mean)
# Renombrar la columna "hrs_diarias" a "promedio_horas"
colnames(promedios_ventas_semana) <- c("edad", "genero", "promedio_ingreso_semana")
# Mostrar la tabla resultante
print(promedios_ventas_semana)
ggplot(promedios_ventas_semana, aes(x = edad, y = promedio_ingreso_semana, color = factor(genero))) +
ggtitle("Promedio ingresos por semana por Edad y Género") +
xlab("Edad") +
ylab("Ingreso por semana") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"), labels = c("Hombre", "Mujer")) +
theme_minimal()
