<<<<<<< HEAD
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +
scale_y_continuous(labels = scales::label_number(scale = 1e-0, suffix = "K")) +
theme(legend.title = element_blank())
# Calcular la cantidad de valores faltantes en ventas
missing_ventas <- colSums(is.na(ventas))
missing_ventas
# Obtener la tabla de frecuencias de edad
tabla_frecuencias_edad <- table(ventas$edad)
# Imprimir la tabla de frecuencias
#tabla_frecuencias_edad
# Suponiendo que tienes la tabla de frecuencias tabla_frecuencias_edad
# Convertir la tabla de frecuencias en un vector
frecuencias <- as.vector(tabla_frecuencias_edad)
# Obtener los valores únicos de la columna de edad (nombres de las barras)
edades <- as.numeric(names(tabla_frecuencias_edad))
# Crear el gráfico de barras
barplot(frecuencias, names.arg = edades, xlab = "Edad", ylab = "Frecuencia",
main = "Gráfico de Frecuencia por Edad", col = "blue")
summary(ventas$genero)
if (length(unique(ventas$genero)) > 2) {
cat("La variable dummy_column tiene más de dos valores únicos.\n")
# Aquí puedes realizar acciones adicionales de limpieza si es necesario
} else {
cat("La variable dummy_column tiene dos o menos valores únicos.\n")
# Aquí puedes tomar decisiones en función de esta información
}
# Creamos los datos agregados de ingreso separados por edad
ingreso_agregados <- aggregate(ingreso ~ edad + genero, data = ventas, FUN = mean)
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso, color = factor(genero))) +
geom_line(size = 1) +  # Usamos geom_line en lugar de geom_bar
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso total semanal vs Edad por Sexo (0 hombre, 1 mujer)",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +  # Colores personalizados para 0 y 1
scale_y_continuous(labels = scales::label_number(scale = 1e-0, suffix = "K")) +
theme(legend.title = element_blank())  # Eliminamos título de la leyenda
# Umbral para definir outliers superiores
umbral_outliers <- quantile(ventas$ingreso, 0.95)  # Puedes ajustar el percentil según tus necesidades
# Filtrar los datos para quitar los outliers superiores
ventas_filtradas <- ventas[ventas$ingreso <= umbral_outliers, ]
# Crear el gráfico de densidad con datos filtrados
ggplot(ventas_filtradas, aes(x = ingreso, fill = factor(genero))) +
geom_density(alpha = 0.5) +
labs(title = "Distribución de Ingresos por Género sin Outliers Superiores",
x = "Ingreso",
y = "Densidad") +
scale_fill_manual(values = c("#F8766D", "#00BFC4"), labels = c("Hombre", "Mujer")) +
theme_minimal()
# Creamos los datos agregados de ingreso separados por edad
ingreso_agregados <- aggregate(ingreso_hr ~ edad + genero, data = ventas, FUN = mean)
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso_hr, color = factor(genero))) +
geom_line(size = 1) +  # Usamos geom_line en lugar de geom_bar
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso/h vs Edad por Sexo (0 hombre, 1 mujer)",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +  # Colores personalizados para 0 y 1
theme(legend.title = element_blank())  # Eliminamos título de la leyenda
# Eliminar filas con valores faltantes en las columnas de interés
ventas_sin_na <- ventas[complete.cases(ventas$ingreso), ]
# Luego, crear el gráfico utilizando ventas_sin_na en lugar de ventas
# Creamos los datos agregados de ingreso separados por edad
ingreso_agregados <- aggregate(ingreso_hr ~ edad + genero, data = ventas, FUN = mean)
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso_hr, color = factor(genero))) +
geom_line(size = 1) +  # Usamos geom_line en lugar de geom_bar
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso/h vs Edad por Sexo (0 hombre, 1 mujer)",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +  # Colores personalizados para 0 y 1
theme(legend.title = element_blank())  # Eliminamos título de la leyenda
# Eliminar filas con valores faltantes en las columnas de interés
ventas_sin_na <- ventas[complete.cases(ventas$ingreso), ]
ventas_sin_na <- ventas[complete.cases(ventas$genero), ]
ventas_sin_na <- ventas[complete.cases(ventas$hrs_trabajdas), ]
ventas[complete.cases(ventas$hrs_trabajdas), ]
# Eliminar filas con valores faltantes en las columnas de interés
ventas_sin_na <- ventas[complete.cases(ventas$ingreso), ]
ventas_sin_na <- ventas[complete.cases(ventas$genero), ]
ventas_sin_na <- ventas[complete.cases(ventas$hrs_trabajdas), ]
# Eliminar filas con valores faltantes en las columnas de interés
ventas_sin_na <- ventas[complete.cases(ventas$ingreso), ]
ventas_sin_na <- ventas[complete.cases(ventas$genero), ]
#ventas_sin_na <- ventas[complete.cases(ventas$hrs_trabajdas), ]
ventas_sin_na <- ventas[complete.cases(ventas$hrs_diarias), ]
ventas_sin_na <- ventas[complete.cases(ventas$ingreso_hr), ]
# Luego, crear el gráfico utilizando ventas_sin_na en lugar de ventas
# Creamos los datos agregados de ingreso separados por edad
ingreso_agregados <- aggregate(ingreso_hr ~ edad + genero, data = ventas, FUN = mean)
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso_hr, color = factor(genero))) +
geom_line(size = 1) +  # Usamos geom_line en lugar de geom_bar
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso/h vs Edad por Sexo (0 hombre, 1 mujer)",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +  # Colores personalizados para 0 y 1
theme(legend.title = element_blank())  # Eliminamos título de la leyenda
# Creamos los datos agregados de ingreso separados por edad
ingreso_agregados <- aggregate(ingreso_hr ~ edad + genero, data = ventas, FUN = mean)
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso_hr, color = factor(genero))) +
geom_line(size = 1, na.rm=TRUE) +  # Usamos geom_line en lugar de geom_bar
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso/h vs Edad por Sexo (0 hombre, 1 mujer)",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +  # Colores personalizados para 0 y 1
theme(legend.title = element_blank())  # Eliminamos título de la leyenda
# Creamos los datos agregados de ingreso separados por edad
ingreso_agregados <- aggregate(hrs_diarias ~ edad + genero, data = ventas, FUN = mean)
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = hrs_diarias, color = factor(genero))) +
geom_line(size = 1, na.rm=TRUE) +  # Usamos geom_line en lugar de geom_bar
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Horas diarias trabajadas vs Edad por Sexo (0 hombre, 1 mujer)",
x = "Edad", y = "Horas") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +  # Colores personalizados para 0 y 1
theme(legend.title = element_blank())  # Eliminamos título de la leyenda
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso, color = factor(genero))) +
geom_line(size = 1, na.rm = TRUE) +  # Agrega na.rm = TRUE aquí
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso total semanal vs Edad por Sexo (0 hombre, 1 mujer)",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +
scale_y_continuous(labels = scales::label_number(scale = 1e-0, suffix = "K")) +
theme(legend.title = element_blank())
ggplot(data = ventas, aes(x = edad, y = ingreso, color = factor(genero))) +
geom_line(size = 1, na.rm = TRUE) +  # Agrega na.rm = TRUE aquí
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso total semanal vs Edad por Sexo (0 hombre, 1 mujer)",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +
scale_y_continuous(labels = scales::label_number(scale = 1e-0, suffix = "K")) +
theme(legend.title = element_blank())
ggplot(data = ventas, aes(x = edad, y = ingreso, color = factor(genero))) +
geom_line(size = 1, na.rm = TRUE) +  # Agrega na.rm = TRUE aquí
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso total semanal vs Edad por Sexo (0 hombre, 1 mujer)",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
theme(legend.title = element_blank())
ggplot(data = ventas, aes(x = edad, y = ingreso, color = factor(genero))) +
geom_line(size = 1, na.rm = TRUE) +  # Agrega na.rm = TRUE aquí
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso total semanal vs Edad por Sexo (0 hombre, 1 mujer)",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +
theme(legend.title = element_blank())
ggplot(data = ventas, aes(x = edad, y = ingreso, color = factor(genero))) +
geom_line(size = 1, na.rm = TRUE) +  # Agrega na.rm = TRUE aquí
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso total semanal vs Edad por Sexo (0 hombre, 1 mujer)",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "K")) +
theme(legend.title = element_blank())
# Cálculo de horas promedio trabajadas por hombres y mujeres
horas_promedio <- aggregate(hrs_diarias ~ genero, data = ventas, FUN = mean)
# Renombrar los valores de genero para que sean más descriptivos
horas_promedio$genero <- ifelse(horas_promedio$genero == 0, "Hombre", "Mujer")
# Imprimir los resultados
print(horas_promedio)
# Creamos los datos agregados de ingreso separados por edad y cuarentena
ingreso_agregados_cuarentena <- aggregate(ingreso ~ genero + cuarentena1, data = ventas, FUN = mean)
factor_cuarentena <- factor(ingreso_agregados_cuarentena$cuarentena1)
# Generar el gráfico de barras
ggplot(data = ingreso_agregados_cuarentena, aes(x = genero, y = ingreso, fill = factor_agregados_cuarentena)) +
geom_bar(stat = "identity", position = "dodge") +  # Gráfico de barras con posición esquivada
labs(title = "Ingreso vs Genero (1=mujer, 0=hombre) por cuarentena (1 si hubo, 0 no)",
x = "Genero", y = "Ingreso") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
scale_fill_manual(values = c("0" = "red", "1" = "blue"))  # Color para genero (0 y 1)
# Creamos los datos agregados de ingreso separados por edad y cuarentena
ingreso_agregados_cuarentena <- aggregate(ingreso ~ genero + cuarentena1, data = ventas, FUN = mean)
factor_cuarentena <- factor(ingreso_agregados_cuarentena$cuarentena1)
# Generar el gráfico de barras
ggplot(data = ingreso_agregados_cuarentena, aes(x = genero, y = ingreso, fill = ingreso_agregados_cuarentena)) +
geom_bar(stat = "identity", position = "dodge") +  # Gráfico de barras con posición esquivada
labs(title = "Ingreso vs Genero (1=mujer, 0=hombre) por cuarentena (1 si hubo, 0 no)",
x = "Genero", y = "Ingreso") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
scale_fill_manual(values = c("0" = "red", "1" = "blue"))  # Color para genero (0 y 1)
# Creamos los datos agregados de ingreso separados por edad y cuarentena
ingreso_agregados_cuarentena <- aggregate(ingreso ~ genero + cuarentena1, data = ventas, FUN = mean)
factor_cuarentena <- factor(ingreso_agregados_cuarentena$cuarentena1)
# Generar el gráfico de barras
ggplot(data = ingreso_agregados_cuarentena, aes(x = genero, y = ingreso, fill = ingreso_cuarentena)) +
geom_bar(stat = "identity", position = "dodge") +  # Gráfico de barras con posición esquivada
labs(title = "Ingreso vs Genero (1=mujer, 0=hombre) por cuarentena (1 si hubo, 0 no)",
x = "Genero", y = "Ingreso") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
scale_fill_manual(values = c("0" = "red", "1" = "blue"))  # Color para genero (0 y 1)
# Creamos los datos agregados de ingreso separados por edad y cuarentena
ingreso_agregados_cuarentena <- aggregate(ingreso ~ genero + cuarentena1, data = ventas, FUN = mean)
factor_cuarentena <- factor(ingreso_agregados_cuarentena$cuarentena1)
# Generar el gráfico de barras
ggplot(data = ingreso_agregados_cuarentena, aes(x = genero, y = ingreso, fill = factor_cuarentena)) +
geom_bar(stat = "identity", position = "dodge") +  # Gráfico de barras con posición esquivada
labs(title = "Ingreso vs Genero (1=mujer, 0=hombre) por cuarentena (1 si hubo, 0 no)",
x = "Genero", y = "Ingreso") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
scale_fill_manual(values = c("0" = "red", "1" = "blue"))  # Color para genero (0 y 1)
# Creamos los datos agregados de ingreso separados por edad y cuarentena
ingreso_agregados_cuarentena <- aggregate(ingreso ~ genero + cuarentena1, data = ventas, FUN = mean)
factor_cuarentena <- factor(ingreso_agregados_cuarentena$cuarentena1)
# Generar el gráfico de barras
ggplot(data = ingreso_agregados_cuarentena, aes(x = genero, y = ingreso, fill = ingreso_agregados_cuarentena)) +
geom_bar(stat = "identity", position = "dodge") +  # Gráfico de barras con posición esquivada
labs(title = "Ingreso vs Genero (1=mujer, 0=hombre) por cuarentena (1 si hubo, 0 no)",
x = "Genero", y = "Ingreso") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
scale_fill_manual(values = c("0" = "red", "1" = "blue"))  # Color para genero (0 y 1)
# Creamos los datos agregados de ingreso separados por edad y cuarentena
ingreso_agregados_cuarentena <- aggregate(ingreso ~ genero + cuarentena1, data = ventas, FUN = mean)
factor_cuarentena <- factor(ingreso_agregados_cuarentena$cuarentena1)
# Generar el gráfico de barras
ggplot(data = ingreso_agregados_cuarentena, aes(x = genero, y = ingreso, fill = factor_cuarentena)) +
geom_bar(stat = "identity", position = "dodge") +  # Gráfico de barras con posición esquivada
labs(title = "Ingreso vs Genero (1=mujer, 0=hombre) por cuarentena (1 si hubo, 0 no)",
x = "Genero", y = "Ingreso") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
scale_fill_manual(values = c("0" = "red", "1" = "blue"))  # Color para genero (0 y 1)
# Creamos los datos agregados de ingreso separados por edad y cuarentena
ingreso_agregados_cuarentena <- aggregate(ingreso ~ genero + cuarentena1, data = ventas, FUN = mean)
factor_cuarentena <- factor(ingreso_agregados_cuarentena$cuarentena1)
# Generar el gráfico de barras
ggplot(data = ingreso_agregados_cuarentena, aes(x = genero, y = ingreso, fill = ventas$cuarentena1)) +
geom_bar(stat = "identity", position = "dodge") +  # Gráfico de barras con posición esquivada
labs(title = "Ingreso vs Genero (1=mujer, 0=hombre) por cuarentena (1 si hubo, 0 no)",
x = "Genero", y = "Ingreso") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
scale_fill_manual(values = c("0" = "red", "1" = "blue"))  # Color para genero (0 y 1)
# Creamos los datos agregados de ingreso separados por edad y cuarentena
ingreso_agregados_cuarentena <- aggregate(ingreso ~ genero + cuarentena1, data = ventas, FUN = mean)
factor_cuarentena <- factor(ingreso_agregados_cuarentena$cuarentena1)
# Generar el gráfico de barras
ggplot(data = ingreso_agregados_cuarentena, aes(x = genero, y = ingreso, fill = cuarentena1)) +
geom_bar(stat = "identity", position = "dodge") +  # Gráfico de barras con posición esquivada
labs(title = "Ingreso vs Genero (1=mujer, 0=hombre) por cuarentena (1 si hubo, 0 no)",
x = "Genero", y = "Ingreso") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
scale_fill_manual(values = c("0" = "red", "1" = "blue"))  # Color para genero (0 y 1)
# Creamos los datos agregados de ingreso separados por edad y cuarentena
ingreso_agregados_cuarentena <- aggregate(ingreso ~ genero + cuarentena1, data = ventas, FUN = mean)
factor_cuarentena <- factor(ingreso_agregados_cuarentena$cuarentena1)
# Generar el gráfico de barras
ggplot(data = ingreso_agregados_cuarentena, aes(x = genero, y = ingreso, fill = factor_cuarentena)) +
geom_bar(stat = "identity", position = "dodge") +  # Gráfico de barras con posición esquivada
labs(title = "Ingreso vs Genero (1=mujer, 0=hombre) por cuarentena (1 si hubo, 0 no)",
x = "Genero", y = "Ingreso") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
scale_fill_manual(values = c("0" = "red", "1" = "blue"))  # Color para genero (0 y 1)
ventas <- read.csv("mersample.csv", sep = ";", encoding = "UTF8")
head(ventas)
ventas <- read.csv("mersample.csv", sep = ";", encoding = "UTF-8")
head(ventas)
=======
# Mostrar el promedio de ingreso para Mujeres
cat("Los hombres trabajan en promedio" , promedio_semanal_hombres,"horas a la semana", "\n")
promedio_semanal_mujeres <- mean(ventas$hrs_trabajadas[ventas$genero == 1], na.rm = TRUE)
# Mostrar el promedio de ingreso para Mujeres
cat("Las mujeres trabajan en promedio" , promedio_semanal_mujeres,"horas a la semana", "\n")
diff_horas_genero <- ((promedio_semanal_hombres-promedio_semanal_mujeres)*100)/promedio_semanal_mujeres
cat("Los hombres trabajan en promedio" , diff_horas_genero ,"horas", "más que las mujeres a la semana", "\n")
# Agregamos por horas semanales trabajdas pore edad
promedios_ventas_hora <- aggregate(ingreso_hr ~ edad + genero, data = ventas, FUN = mean)
# Renombrar la columna "hrs_diarias" a "promedio_horas"
colnames(promedios_ventas_hora) <- c("edad", "genero", "promedio_ingreso_hr")
# Mostrar la tabla resultante
print(promedios_ventas_hora)
ggplot(promedios_ventas_hora, aes(x = edad, y = promedio_ingreso_hr, color = factor(genero))) +
ggtitle("Promedio de Horas Semanales Trabajadas por Edad y Género") +
xlab("Edad") +
ylab("Promedio Horas Diarias Trabajadas") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"), labels = c("Hombre", "Mujer")) +
theme_minimal()
View(promedios_ventas_hora)
View(ventas)
mersample$hrs_diarias <- as.integer(mersample$hrs_diarias,mersample$ingres_hr, mersample$seamana_año, mersample$transacciones_hr, mersample$ingreso_hr)
mersample$hrs_diarias <- as.integer(mersample$ingreso_hr)
View(mersample)
countna(mersample)
colSums(is.na(mersample))
>>>>>>> main/main
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())  # Esto eliminará todas las variables del entorno
#install.packages("skimr")
#install.packages("tinytex")
#install.packages("DT")
#install.packages("kableExtra")
#install.packages("reticulate")
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("kableExtra")
#install.packages("gt")
#install.packages("xtable")
library(gt)
library(tinytex)
#library(kableExtra)
library(reticulate)
library(ggplot2)
library(dplyr)
library(scales)
library(skimr)
library(lubridate)
library(stats)
library(DT)
library(tidyr)
set.seed(123)
<<<<<<< HEAD
setwd("//wsl$/Ubuntu-22.04/root/home/damiatus/cursobbdatos/tarea 01 Ing Marketing") #Seteamos el directorio de trabajo local
ventas <- read.csv("mersample.csv", sep = ";", encoding = "UTF-8")
head(ventas)
skim(ventas)
# Crear el gráfico de distribución
ggplot(data = ventas, aes(x = ingreso)) +
geom_histogram(binwidth = 25000, fill = "blue", color = "black") +
labs(title = "Distribución de Ingresos", x = "Ingresos", y = "Frecuencia")
# Calcular los límites de los bigotes (whiskers) para definir los outliers
q1 <- quantile(ventas$ingreso, 0.25)
q3 <- quantile(ventas$ingreso, 0.75)
iqr <- q3 - q1
lower_fence <- q1 - 1.5 * iqr
upper_fence <- q3 + 1.5 * iqr
# Filtrar los datos para excluir los outliers
ventas_filtradas <- ventas %>% filter(ingreso >= 0, ingreso <= upper_fence)
# Crear el gráfico de distribución sin outliers
ggplot(data = ventas_filtradas, aes(x = ingreso)) +
geom_histogram(binwidth = 25000, fill = "blue", color = "black") +
scale_x_continuous(labels = scales::label_number(scale = 1e-0, suffix = " Mil"))  +
labs(title = "Distribución de Ingresos (Sin Outliers)", x = "Ingresos", y = "Frecuencia")
## Con outliers
# Obtener los principales datos estadísticos de la variable 'income'
summary_stats <- summary(ventas$ingreso)
# Imprimir los resultados
cat("Resumen estadístico de ingreso:\n")
print(summary_stats)
# Calcular el rango intercuartil (IQR)
Q1 <- quantile(ventas$ingreso, 0.25)
Q3 <- quantile(ventas$ingreso, 0.75)
IQR <- Q3 - Q1
# Definir límites para identificar outliers
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
# Filtrar los datos para quitar outliers
rentas_filtradas <- ventas %>% filter(ingreso >= 0 & ingreso <= upper_bound)
# Obtener los principales datos estadísticos de la variable 'income' sin outliers
summary_stats <- summary(rentas_filtradas$ingreso)
# Imprimir los resultados
cat("Resumen estadístico de income sin outliers:\n")
print(summary_stats)
# Calcular la cantidad de valores faltantes en ventas
missing_ventas <- colSums(is.na(ventas))
missing_ventas
# Eliminar filas con valores faltantes en las columnas de interés
ventas_sin_na <- ventas[complete.cases(ventas$ingreso), ]
ventas_sin_na <- ventas[complete.cases(ventas$genero), ]
#ventas_sin_na <- ventas[complete.cases(ventas$hrs_trabajdas), ]
ventas_sin_na <- ventas[complete.cases(ventas$hrs_diarias), ]
ventas_sin_na <- ventas[complete.cases(ventas$ingreso_hr), ]
# Luego, crear el gráfico utilizando ventas_sin_na en lugar de ventas
# Imputar valores faltantes en la columna de ingreso con la mediana
median_ingreso <- median(ventas$ingreso, na.rm = TRUE)
ventas$ingreso[is.na(ventas$ingreso)] <- median_ingreso
# Luego, crear el gráfico utilizando ventas
# Obtener la tabla de frecuencias de edad
tabla_frecuencias_edad <- table(ventas$edad)
# Imprimir la tabla de frecuencias
#tabla_frecuencias_edad
# Suponiendo que tienes la tabla de frecuencias tabla_frecuencias_edad
# Convertir la tabla de frecuencias en un vector
frecuencias <- as.vector(tabla_frecuencias_edad)
# Obtener los valores únicos de la columna de edad (nombres de las barras)
edades <- as.numeric(names(tabla_frecuencias_edad))
# Crear el gráfico de barras
barplot(frecuencias, names.arg = edades, xlab = "Edad", ylab = "Frecuencia",
main = "Gráfico de Frecuencia por Edad", col = "blue")
summary(ventas$genero)
if (length(unique(ventas$genero)) > 2) {
cat("La variable dummy_column tiene más de dos valores únicos.\n")
# Aquí puedes realizar acciones adicionales de limpieza si es necesario
} else {
cat("La variable dummy_column tiene dos o menos valores únicos.\n")
# Aquí puedes tomar decisiones en función de esta información
}
# Creamos los datos agregados de ingreso separados por edad
ingreso_agregados <- aggregate(ingreso ~ edad + genero, data = ventas, FUN = mean)
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso, color = factor(genero))) +
geom_line(size = 1) +  # Usamos geom_line en lugar de geom_bar
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso total semanal vs Edad por Sexo (0 hombre, 1 mujer)",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +  # Colores personalizados para 0 y 1
scale_y_continuous(labels = scales::label_number(scale = 1e-0, suffix = "K")) +
theme(legend.title = element_blank())  # Eliminamos título de la leyenda
# Umbral para definir outliers superiores
umbral_outliers <- quantile(ventas$ingreso, 0.95)  # Puedes ajustar el percentil según tus necesidades
# Filtrar los datos para quitar los outliers superiores
ventas_filtradas <- ventas[ventas$ingreso <= umbral_outliers, ]
# Crear el gráfico de densidad con datos filtrados
ggplot(ventas_filtradas, aes(x = ingreso, fill = factor(genero))) +
geom_density(alpha = 0.5) +
labs(title = "Distribución de Ingresos por Género sin Outliers Superiores",
x = "Ingreso",
y = "Densidad") +
scale_fill_manual(values = c("#F8766D", "#00BFC4"), labels = c("Hombre", "Mujer")) +
theme_minimal()
# Creamos los datos agregados de ingreso separados por edad
ingreso_agregados <- aggregate(ingreso_hr ~ edad + genero, data = ventas, FUN = mean)
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso_hr, color = factor(genero))) +
geom_line(size = 1, na.rm=TRUE) +  # Usamos geom_line en lugar de geom_bar
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso/h vs Edad por Sexo (0 hombre, 1 mujer)",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +  # Colores personalizados para 0 y 1
theme(legend.title = element_blank())  # Eliminamos título de la leyenda
# Creamos los datos agregados de ingreso separados por edad
ingreso_agregados <- aggregate(hrs_trabajadas ~ edad + genero, data = ventas, FUN = mean)
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = hrs_trabajadas, color = factor(genero))) +
geom_line(size = 1) +  # Usamos geom_line en lugar de geom_bar
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Horas semanales trabajadas vs Edad por Sexo (0 hombre, 1 mujer)",
x = "Edad", y = "Horas") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +  # Colores personalizados para 0 y 1
theme(legend.title = element_blank())  # Eliminamos título de la leyenda
calcular_promedio_ingreso <- function(data) {
promedio_mujeres <- mean(data$ingreso[data$genero == 1], na.rm = TRUE)
promedio_hombres <- mean(data$ingreso[data$genero == 0], na.rm = TRUE)
resultados <- data.frame(
Genero = c("Hombre", "Mujer"),
Promedio_Ingreso = c(promedio_hombres, promedio_mujeres)
)
return(resultados)
}
# Llamada a la función y obtención de resultados
resultados_promedio_ingreso <- calcular_promedio_ingreso(ventas)
print(resultados_promedio_ingreso)
table(ventas$rubro)
# Creamos los datos agregados de ingreso separados por edad y genero
ingreso_agregados <- aggregate(ingreso ~ edad + genero + rubro, data = ventas, FUN = mean)
# Filtrar los casos donde el rubro sea "Alimentos y Abarrotes"
ingreso_agregados <- ingreso_agregados[ingreso_agregados$rubro == "Alimentos y Abarrotes", ]
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso, color = factor(genero))) +
geom_line(size = 1) +  # Usamos geom_line en lugar de geom_bar
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso total semanal vs Edad por Sexo (0 hombre, 1 mujer) - Rubro: Alimentos y Abarrotes",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +  # Colores personalizados para 0 y 1
scale_y_continuous(labels = scales::label_number(scale = 1e-0, suffix = "K")) +
theme(legend.title = element_blank())  # Eliminamos título de la leyenda
# Creamos los datos agregados de ingreso separados por edad y genero
ingreso_agregados <- aggregate(ingreso ~ edad + genero + rubro, data = ventas, FUN = mean)
# Filtrar los casos donde el rubro sea "Comida Rápida Oficios y Otros Servicios"
ingreso_agregados <- ingreso_agregados[ingreso_agregados$rubro == "Comida Rápida Oficios y Otros Servicios", ]
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso, color = factor(genero))) +
geom_line(size = 1) +
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso total semanal vs Edad por Sexo (0 hombre, 1 mujer) - Rubro: Comida Rápida Oficios y Otros Servicios",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +
scale_y_continuous(labels = scales::label_number(scale = 1e-0, suffix = "K")) +
theme(legend.title = element_blank())
library(ggplot2)
# Creamos los datos agregados de ingreso separados por edad y genero
ingreso_agregados <- aggregate(ingreso ~ edad + genero + rubro, data = ventas, FUN = mean)
# Filtrar los casos donde el rubro sea "retail"
ingreso_agregados <- ingreso_agregados[ingreso_agregados$rubro == "Retail", ]
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso, color = factor(genero))) +
geom_line(size = 1) +
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso total semanal vs Edad por Sexo (0 hombre, 1 mujer) - Rubro: retail",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +
scale_y_continuous(labels = scales::label_number(scale = 1e-0, suffix = "K")) +
theme(legend.title = element_blank())
library(ggplot2)
# Creamos los datos agregados de ingreso separados por edad y genero
ingreso_agregados <- aggregate(ingreso ~ edad + genero + rubro, data = ventas, FUN = mean)
# Filtrar los casos donde el rubro sea "Vestuario"
ingreso_agregados <- ingreso_agregados[ingreso_agregados$rubro == "Vestuario", ]
# Generar el gráfico de líneas con estilo modificado
ggplot(data = ingreso_agregados, aes(x = edad, y = ingreso, color = factor(genero))) +
geom_line(size = 1) +
geom_vline(xintercept = c(60, 65), linetype = "dashed") +
labs(title = "Ingreso total semanal vs Edad por Sexo (0 hombre, 1 mujer) - Rubro: Vestuario",
x = "Edad", y = "Ingreso") +
theme_minimal() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +
scale_y_continuous(labels = scales::label_number(scale = 1e-0, suffix = "K")) +
theme(legend.title = element_blank())
# Creamos los datos agregados de ingreso separados por edad y cuarentena
ingreso_agregados_cuarentena <- aggregate(ingreso ~ genero + cuarentena1, data = ventas, FUN = mean)
factor_cuarentena <- factor(ingreso_agregados_cuarentena$cuarentena1)
# Generar el gráfico de barras
ggplot(data = ingreso_agregados_cuarentena, aes(x = genero, y = ingreso, fill = factor_cuarentena)) +
geom_bar(stat = "identity", position = "dodge") +  # Gráfico de barras con posición esquivada
labs(title = "Ingreso vs Genero (1=mujer, 0=hombre) por cuarentena (1 si hubo, 0 no)",
x = "Genero", y = "Ingreso") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
scale_fill_manual(values = c("0" = "red", "1" = "blue"))  # Color para genero (0 y 1)
rm(list = ls())  # Esto eliminará todas las variables del entorno
install.packages("skimr")
install.packages("tinytex")
install.packages("DT")
install.packages("kableExtra")
install.packages("skimr")
=======
#setwd("//wsl$/Ubuntu-22.04/root/home/damiatus/cursobbdatos/tarea 01 Ing Marketing") #Seteamos el directorio de trabajo local
mersample <- read.csv("mersample.csv", sep = ";", encoding = "UTF-8")
head(mersample)
options(skimr_options = list(width = 10))
skim(mersample)
colSums(is.na(mersample))
mersample$hrs_diarias <- as.integer(mersample$hrs_diarias,mersample$ingres_hr, mersample$seamana_año, mersample$transacciones_hr, mersample$ingreso_hr)
mersample$hrs_diarias <- as.integer(mersample$ingreso_hr)
options(skimr_options = list(width = 10))
skim(mersample)
mersample <- read.csv("mersample.csv", sep = ";", encoding = "UTF-8")
head(mersample)
options(skimr_options = list(width = 10))
skim(mersample)
colSums(is.na(mersample))
View(mersample)
#mersample$hrs_diarias <- as.integer(mersample$hrs_diarias,mersample$ingres_hr, mersample$seamana_año, mersample$transacciones_hr, mersample$ingreso_hr)
mersample$hrs_diarias <- as.integer(mersample$ingreso_hr)
mersample <- read.csv("mersample.csv", sep = ";", encoding = "UTF-8")
head(mersample)
#mersample$hrs_diarias <- as.integer(mersample$hrs_diarias,mersample$ingres_hr, mersample$seamana_año, mersample$transacciones_hr, mersample$ingreso_hr)
mersample2 <-  mersample$hrs_diarias <- as.integer(mersample$ingreso_hr)
#mersample$hrs_diarias <- as.integer(mersample$hrs_diarias,mersample$ingres_hr, mersample$seamana_año, mersample$transacciones_hr, mersample$ingreso_hr)
mersample2 <- (mersample$hrs_diarias <- as.integer(mersample$ingreso_hr))
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())  # Esto eliminará todas las variables del entorno
#install.packages("skimr")
#install.packages("tinytex")
#install.packages("DT")
#install.packages("kableExtra")
#install.packages("reticulate")
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("kableExtra")
#install.packages("gt")
#install.packages("xtable")
library(gt)
library(tinytex)
#library(kableExtra)
library(reticulate)
library(ggplot2)
library(dplyr)
library(scales)
library(skimr)
library(lubridate)
library(stats)
library(DT)
library(tidyr)
set.seed(123)
#setwd("//wsl$/Ubuntu-22.04/root/home/damiatus/cursobbdatos/tarea 01 Ing Marketing") #Seteamos el directorio de trabajo local
mersample <- read.csv("mersample.csv", sep = ";", encoding = "UTF-8")
head(mersample)
options(skimr_options = list(width = 10))
skim(mersample)
colSums(is.na(mersample))
#mersample$hrs_diarias <- as.integer(mersample$hrs_diarias,mersample$ingres_hr, mersample$seamana_año, mersample$transacciones_hr, mersample$ingreso_hr)
mersample2 <- mersample
mersample2$hrs_diarias <- as.integer(mersample2$ingreso_hr))
View(mersample2)
View(mersample)
mersample2$hrs_diarias <- as.integer(mersample2$ingreso_hr)
mersample2$hrs_diarias <- as.integer(mersample2$hrs_diarias)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())  # Esto eliminará todas las variables del entorno
#install.packages("skimr")
#install.packages("tinytex")
#install.packages("DT")
#install.packages("kableExtra")
#install.packages("reticulate")
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("kableExtra")
#install.packages("gt")
#install.packages("xtable")
library(gt)
library(tinytex)
#library(kableExtra)
library(reticulate)
library(ggplot2)
library(dplyr)
library(scales)
library(skimr)
library(lubridate)
library(stats)
library(DT)
library(tidyr)
set.seed(123)
#setwd("//wsl$/Ubuntu-22.04/root/home/damiatus/cursobbdatos/tarea 01 Ing Marketing") #Seteamos el directorio de trabajo local
mersample <- read.csv("mersample.csv", sep = ";", encoding = "UTF-8")
head(mersample)
options(skimr_options = list(width = 10))
skim(mersample)
colSums(is.na(mersample))
#mersample$hrs_diarias <- as.integer(mersample$hrs_diarias,mersample$ingres_hr, mersample$seamana_año, mersample$transacciones_hr, mersample$ingreso_hr)
mersample2 <- mersample
mersample2$hrs_diarias <- as.integer(mersample2$hrs_diarias)
View(mersample)
View(mersample2)
mersample <- read.csv("mersample.csv", sep = ";", encoding = "UTF-8")
head(mersample)
mersample <- as.numeric(gsub(",", ".", mersample))
options(skimr_options = list(width = 10))
skim(mersample)
mersample <- read.csv("mersample.csv", sep = ";", encoding = "UTF-8")
head(mersample)
mersample$hrs_diarias <- as.numeric(gsub(",", ".", mersample$hrs_diarias))
mersample$transacciones_hr <- as.numeric(gsub(",", ".", mersample$transacciones_hr))
mersample$ingreso_hr <- as.numeric(gsub(",", ".", mersample$ingreso_hr))
View(mersample)
options(skimr_options = list(width = 10))
skim(mersample)
head(mersample)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())  # Esto eliminará todas las variables del entorno
#install.packages("skimr")
#install.packages("tinytex")
#install.packages("DT")
#install.packages("kableExtra")
#install.packages("reticulate")
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("kableExtra")
#install.packages("gt")
#install.packages("xtable")
library(gt)
library(tinytex)
#library(kableExtra)
library(reticulate)
library(ggplot2)
library(dplyr)
library(scales)
library(skimr)
library(lubridate)
library(stats)
library(DT)
library(tidyr)
set.seed(123)
#setwd("//wsl$/Ubuntu-22.04/root/home/damiatus/cursobbdatos/tarea 01 Ing Marketing") #Seteamos el directorio de trabajo local
mersample <- read.csv("mersample.csv", sep = ";", encoding = "UTF-8")
head(mersample)
mersample$hrs_diarias <- as.numeric(gsub(",", ".", mersample$hrs_diarias))
mersample$transacciones_hr <- as.numeric(gsub(",", ".", mersample$transacciones_hr))
mersample$ingreso_hr <- as.numeric(gsub(",", ".", mersample$ingreso_hr))
options(skimr_options = list(width = 10))
skim(mersample)
colSums(is.na(mersample))
#mersample$hrs_diarias <- as.integer(mersample$hrs_diarias,mersample$ingres_hr, mersample$seamana_año, mersample$transacciones_hr, mersample$ingreso_hr)
#mersample2 <- mersample
#mersample2$hrs_diarias <- as.integer(mersample2$hrs_diarias)
# Crear un histograma de los ingresos
hist(mersample$ingreso, main = "Distribución de Ingresos", xlab = "Ingresos", ylab = "Frecuencia")
# Eliminar filas con ingresos superiores a $1,000,000
ventas <- mersample[mersample$ingreso <= 1000000, ]
# Crear un histograma con el eje X en notación decimal
ggplot(ventas, aes(x = ingreso)) +
geom_histogram(binwidth = 10000, fill = "blue", color = "black") +
labs(title = "Distribución de Ingresos (Menos de $1,000,000)",
x = "Ingresos", y = "Frecuencia") +
scale_x_continuous(labels = scales::comma) # Utiliza notación decimal
# Calcular el promedio de ingresos por edad y género
ingresos_promedio <- ventas %>%
group_by(edad, genero) %>%
summarize(ingreso_promedio = mean(ingreso))
# Crear un gráfico de líneas
ggplot(ingresos_promedio, aes(x = edad, y = ingreso_promedio, color = factor(genero))) +
geom_line(aes(group = genero)) +
labs(title = "Ingreso Promedio por Edad y Género",
x = "Edad", y = "Ingreso Promedio") +
scale_color_discrete(name = "Género", labels = c("Hombre", "Mujer")) +
theme_minimal()
ggplot(ingresos_promedio, aes(x = edad, y = ingreso_promedio, color = factor(genero))) +
ggtitle("Ingreso Promedio por Edad y Género") +
xlab("Edad") +
ylab("Ingreso Promedio") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"),name = "Género", labels = c("Hombre", "Mujer")) +
theme_minimal()
set.seed(54)
x <- ingresos_promedio$edad
y <- ingresos_promedio$ingreso_promedio
genero <- ingresos_promedio$genero
# Gráfico de dispersión con regresión suavizada y control por género
plot(x[genero == 0], y[genero == 0], pch = 1, col = "blue", xlab = "Edad", ylab = "Ingreso Promedio")
points(x[genero == 1], y[genero == 1], pch = 1, col = "red")
lines(lowess(x[genero == 0], y[genero == 0]), col = "blue", lwd = 2)
lines(lowess(x[genero == 1], y[genero == 1]), col = "red", lwd = 2)
# Leyenda
legend(x = "topright", legend = c("Hombre", "Mujer"), col = c("blue", "red"), pch = 16, title = "Género")
# Título del gráfico
title(main = "Ingreso agregado por edad con Regresión Suavizada")
# Gráfico con ggplot2 que muestra líneas de intervalos de confianza con colores diferentes por género
ggplot(ingresos_promedio, aes(x = edad, y = ingreso_promedio, color = factor(genero), fill = factor(genero))) +
ggtitle("Ingreso promedio agregado por edad") +
xlab("Edad") +
ylab("Ingreso Promedio") +
geom_smooth(method = "lm", se = TRUE) +
scale_color_manual(values = c("blue","red"), labels = c("Hombre", "Mujer")) +  # Etiquetas de los colores
scale_fill_manual(values = c("blue","red"), labels = c("Hombre", "Mujer")) +    # Etiquetas de los colores
labs(color = "Género", fill = "Género") +  # Cambio de nombres de las leyendas de colores
theme_minimal()
# Gráfico con ggplot2 que muestra líneas de intervalos de confianza con colores diferentes por género
ggplot(ventas, aes(x = edad, y = ingreso, color = factor(genero), fill = factor(genero))) +
ggtitle("Ingreso promedio por edad ") +
xlab("Edad") +
ylab("Ingreso Promedio") +
geom_smooth(method = "lm", se = TRUE) +
scale_color_manual(values = c("blue","red"), labels = c("Hombre", "Mujer")) +  # Etiquetas de los colores
scale_fill_manual(values = c("blue","red"), labels = c("Hombre", "Mujer")) +    # Etiquetas de los colores
labs(color = "Género", fill = "Género") +  # Cambio de nombres de las leyendas de colores
theme_minimal()
promedio_hombres <- mean(ventas$ingreso[ventas$genero == 0], na.rm = TRUE)
# Mostrar el promedio de ingreso para Mujeres
cat("El ingreso promedio entre hombres es:" , promedio_hombres, "\n")
promedio_mujeres <- mean(ventas$ingreso[ventas$genero == 1], na.rm = TRUE)
# Mostrar el promedio de ingreso para Mujeres
cat("El ingreso promedio entre muejres es:" , promedio_mujeres, "\n")
promedio_hombres <- mean(ventas$ingreso[ventas$genero == 0], na.rm = TRUE)
diff_genero <- ((promedio_hombres-promedio_mujeres)*100)/promedio_mujeres
cat("Los hombres ganan en promedio:" , diff_genero ,"%", "más que las mujeres", "\n")
# Agregamos por horas diarias trabajdas pore edad
promedios_horas_dia <- aggregate(hrs_diarias ~ edad + genero, data = ventas, FUN = mean)
# Renombrar la columna "hrs_diarias" a "promedio_horas"
colnames(promedios_horas_dia) <- c("edad", "genero", "promedio_horas_dia")
# Mostrar la tabla resultante
print(promedios_horas_dia)
ggplot(promedios_horas_dia, aes(x = edad, y = promedio_horas_dia, color = factor(genero))) +
ggtitle("Promedio de Horas Diarias Trabajadas por Edad y Género") +
xlab("Edad") +
ylab("Promedio Horas Diarias Trabajadas") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"), labels = c("Hombre", "Mujer")) +
theme_minimal()
# Agregamos por horas semanales trabajdas pore edad
promedios_horas_semana <- aggregate(hrs_trabajadas ~ edad + genero, data = ventas, FUN = mean)
# Renombrar la columna "hrs_diarias" a "promedio_horas"
colnames(promedios_horas_semana) <- c("edad", "genero", "promedio_horas_semana")
# Mostrar la tabla resultante
print(promedios_horas_semana)
ggplot(promedios_horas_semana, aes(x = edad, y = promedio_horas_semana, color = factor(genero))) +
ggtitle("Promedio de Horas Semanales Trabajadas por Edad y Género") +
xlab("Edad") +
ylab("Promedio Horas Diarias Trabajadas") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"), labels = c("Hombre", "Mujer")) +
theme_minimal()
promedio_semanal_hombres <- mean(ventas$hrs_trabajadas[ventas$genero == 0], na.rm = TRUE)
# Mostrar el promedio de ingreso para Mujeres
cat("Los hombres trabajan en promedio" , promedio_semanal_hombres,"horas a la semana", "\n")
promedio_semanal_mujeres <- mean(ventas$hrs_trabajadas[ventas$genero == 1], na.rm = TRUE)
# Mostrar el promedio de ingreso para Mujeres
cat("Las mujeres trabajan en promedio" , promedio_semanal_mujeres,"horas a la semana", "\n")
diff_horas_genero <- ((promedio_semanal_hombres-promedio_semanal_mujeres)*100)/promedio_semanal_mujeres
cat("Los hombres trabajan en promedio" , diff_horas_genero ,"horas", "más que las mujeres a la semana", "\n")
# Agregamos por horas semanales trabajdas pore edad
promedios_ventas_hora <- aggregate(ingreso_hr ~ edad + genero, data = ventas, FUN = mean)
# Renombrar la columna "hrs_diarias" a "promedio_horas"
colnames(promedios_ventas_hora) <- c("edad", "genero", "promedio_ingreso_hr")
# Mostrar la tabla resultante
print(promedios_ventas_hora)
ggplot(promedios_ventas_hora, aes(x = edad, y = promedio_ingreso_hr, color = factor(genero))) +
ggtitle("Promedio de Horas Semanales Trabajadas por Edad y Género") +
xlab("Edad") +
ylab("Promedio Horas Diarias Trabajadas") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"), labels = c("Hombre", "Mujer")) +
theme_minimal()
# Agregamos por horas semanales trabajdas pore edad
promedios_ventas_hora <- aggregate(ingreso_hr ~ edad + genero, data = ventas, FUN = mean)
# Renombrar la columna "hrs_diarias" a "promedio_horas"
colnames(promedios_ventas_hora) <- c("edad", "genero", "promedio_ingreso_hr")
# Mostrar la tabla resultante
print(promedios_ventas_hora)
ggplot(promedios_ventas_hora, aes(x = edad, y = promedio_ingreso_hr, color = factor(genero))) +
ggtitle("Promedio ingresos por hora por Edad y Género") +
xlab("Edad") +
ylab("Promedio ingreso por hora") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"), labels = c("Hombre", "Mujer")) +
theme_minimal()
# Agregamos por horas semanales trabajdas pore edad
promedios_ventas_hora <- aggregate(ingreso_hr ~ edad + genero, data = ventas, FUN = mean)
# Renombrar la columna "hrs_diarias" a "promedio_horas"
colnames(promedios_ventas_hora) <- c("edad", "genero", "promedio_ingreso_hr")
# Mostrar la tabla resultante
print(promedios_ventas_hora)
ggplot(promedios_ventas_hora, aes(x = edad, y = promedio_ingreso_hr, color = factor(genero))) +
ggtitle("Promedio ingresos por hora por Edad y Género") +
xlab("Edad") +
ylab("Ingreso por hora") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"), labels = c("Hombre", "Mujer")) +
theme_minimal()
View(mersample)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())  # Esto eliminará todas las variables del entorno
#install.packages("skimr")
#install.packages("tinytex")
#install.packages("DT")
#install.packages("kableExtra")
#install.packages("reticulate")
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("kableExtra")
#install.packages("gt")
#install.packages("xtable")
library(gt)
library(tinytex)
#library(kableExtra)
library(reticulate)
library(ggplot2)
library(dplyr)
library(scales)
library(skimr)
library(lubridate)
library(stats)
library(DT)
library(tidyr)
set.seed(123)
#setwd("//wsl$/Ubuntu-22.04/root/home/damiatus/cursobbdatos/tarea 01 Ing Marketing") #Seteamos el directorio de trabajo local
mersample <- read.csv("mersample.csv", sep = ";", encoding = "UTF-8")
head(mersample)
mersample$hrs_diarias <- as.numeric(gsub(",", ".", mersample$hrs_diarias))
mersample$transacciones_hr <- as.numeric(gsub(",", ".", mersample$transacciones_hr))
mersample$ingreso_hr <- as.numeric(gsub(",", ".", mersample$ingreso_hr))
options(skimr_options = list(width = 10))
skim(mersample)
# Crear un histograma de los ingresos
hist(mersample$ingreso, main = "Distribución de Ingresos", xlab = "Ingresos", ylab = "Frecuencia")
# Eliminar filas con ingresos superiores a $1,000,000
ventas <- mersample[mersample$ingreso <= 1000000, ]
# Crear un histograma con el eje X en notación decimal
ggplot(ventas, aes(x = ingreso)) +
geom_histogram(binwidth = 10000, fill = "blue", color = "black") +
labs(title = "Distribución de Ingresos (Menos de $1,000,000)",
x = "Ingresos", y = "Frecuencia") +
scale_x_continuous(labels = scales::comma) # Utiliza notación decimal
# Calcular el promedio de ingresos por edad y género
ingresos_promedio <- ventas %>%
group_by(edad, genero) %>%
summarize(ingreso_promedio = mean(ingreso))
# Crear un gráfico de líneas
ggplot(ingresos_promedio, aes(x = edad, y = ingreso_promedio, color = factor(genero))) +
geom_line(aes(group = genero)) +
labs(title = "Ingreso Promedio por Edad y Género",
x = "Edad", y = "Ingreso Promedio") +
scale_color_discrete(name = "Género", labels = c("Hombre", "Mujer")) +
theme_minimal()
ggplot(ingresos_promedio, aes(x = edad, y = ingreso_promedio, color = factor(genero))) +
ggtitle("Ingreso Promedio por Edad y Género regresionado") +
xlab("Edad") +
ylab("Ingreso Promedio") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"),name = "Género", labels = c("Hombre", "Mujer")) +
theme_minimal()
set.seed(54)
x <- ingresos_promedio$edad
y <- ingresos_promedio$ingreso_promedio
genero <- ingresos_promedio$genero
# Gráfico de dispersión con regresión suavizada y control por género
plot(x[genero == 0], y[genero == 0], pch = 1, col = "blue", xlab = "Edad", ylab = "Ingreso Promedio")
points(x[genero == 1], y[genero == 1], pch = 1, col = "red")
lines(lowess(x[genero == 0], y[genero == 0]), col = "blue", lwd = 2)
lines(lowess(x[genero == 1], y[genero == 1]), col = "red", lwd = 2)
# Leyenda
legend(x = "topright", legend = c("Hombre", "Mujer"), col = c("blue", "red"), pch = 16, title = "Género")
# Título del gráfico
title(main = "Ingreso agregado por edad con Regresión Suavizada")
# Gráfico con ggplot2 que muestra líneas de intervalos de confianza con colores diferentes por género
ggplot(ingresos_promedio, aes(x = edad, y = ingreso_promedio, color = factor(genero), fill = factor(genero))) +
ggtitle("Ingreso promedio agregado por edad c/dispersion") +
xlab("Edad") +
ylab("Ingreso Promedio") +
geom_smooth(method = "lm", se = TRUE) +
scale_color_manual(values = c("blue","red"), labels = c("Hombre", "Mujer")) +  # Etiquetas de los colores
scale_fill_manual(values = c("blue","red"), labels = c("Hombre", "Mujer")) +    # Etiquetas de los colores
labs(color = "Género", fill = "Género") +  # Cambio de nombres de las leyendas de colores
theme_minimal()
# Gráfico con ggplot2 que muestra líneas de intervalos de confianza con colores diferentes por género
ggplot(ventas, aes(x = edad, y = ingreso, color = factor(genero), fill = factor(genero))) +
ggtitle("Ingreso promedio por edad c/dispersion") +
xlab("Edad") +
ylab("Ingreso Promedio") +
geom_smooth(method = "lm", se = TRUE) +
scale_color_manual(values = c("blue","red"), labels = c("Hombre", "Mujer")) +  # Etiquetas de los colores
scale_fill_manual(values = c("blue","red"), labels = c("Hombre", "Mujer")) +    # Etiquetas de los colores
labs(color = "Género", fill = "Género") +  # Cambio de nombres de las leyendas de colores
theme_minimal()
promedio_hombres <- mean(ventas$ingreso[ventas$genero == 0], na.rm = TRUE)
# Mostrar el promedio de ingreso para Mujeres
cat("El ingreso promedio entre hombres es:" , promedio_hombres, "\n")
promedio_mujeres <- mean(ventas$ingreso[ventas$genero == 1], na.rm = TRUE)
# Mostrar el promedio de ingreso para Mujeres
cat("El ingreso promedio entre muejres es:" , promedio_mujeres, "\n")
promedio_hombres <- mean(ventas$ingreso[ventas$genero == 0], na.rm = TRUE)
diff_genero <- ((promedio_hombres-promedio_mujeres)*100)/promedio_mujeres
cat("Los hombres ganan en promedio:" , diff_genero ,"%", "más que las mujeres", "\n")
# Agregamos por horas diarias trabajdas pore edad
promedios_horas_dia <- aggregate(hrs_diarias ~ edad + genero, data = ventas, FUN = mean)
# Renombrar la columna "hrs_diarias" a "promedio_horas"
colnames(promedios_horas_dia) <- c("edad", "genero", "promedio_horas_dia")
# Mostrar la tabla resultante
print(promedios_horas_dia)
ggplot(promedios_horas_dia, aes(x = edad, y = promedio_horas_dia, color = factor(genero))) +
ggtitle("Promedio de Horas Diarias Trabajadas por Edad y Género") +
xlab("Edad") +
ylab("Promedio Horas Diarias Trabajadas") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"), labels = c("Hombre", "Mujer")) +
theme_minimal()
# Agregamos por horas semanales trabajdas pore edad
promedios_ventas_hora <- aggregate(ingreso_hr ~ edad + genero, data = ventas, FUN = mean)
# Renombrar la columna "hrs_diarias" a "promedio_horas"
colnames(promedios_ventas_hora) <- c("edad", "genero", "promedio_ingreso_hr")
# Mostrar la tabla resultante
print(promedios_ventas_hora)
ggplot(promedios_ventas_hora, aes(x = edad, y = promedio_ingreso_hr, color = factor(genero))) +
ggtitle("Promedio ingresos por hora por Edad y Género") +
xlab("Edad") +
ylab("Ingreso por hora") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"), labels = c("Hombre", "Mujer")) +
theme_minimal()
# Agregamos por horas semanales trabajdas pore edad
promedios_horas_semana <- aggregate(hrs_trabajadas ~ edad + genero, data = ventas, FUN = mean)
# Renombrar la columna "hrs_diarias" a "promedio_horas"
colnames(promedios_horas_semana) <- c("edad", "genero", "promedio_horas_semana")
# Mostrar la tabla resultante
print(promedios_horas_semana)
ggplot(promedios_horas_semana, aes(x = edad, y = promedio_horas_semana, color = factor(genero))) +
ggtitle("Promedio de Horas Semanales Trabajadas por Edad y Género") +
xlab("Edad") +
ylab("Promedio Horas Diarias Trabajadas") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"), labels = c("Hombre", "Mujer")) +
theme_minimal()
# Agregamos por horas semanales trabajdas pore edad
promedios_ventas_semana <- aggregate(ingreso ~ edad + genero, data = ventas, FUN = mean)
# Renombrar la columna "hrs_diarias" a "promedio_horas"
colnames(promedios_ventas_semana) <- c("edad", "genero", "promedio_ingreso_semana")
# Mostrar la tabla resultante
print(promedios_ventas_semana)
ggplot(promedios_ventas_semana, aes(x = edad, y = promedio_ingreso_semana, color = factor(genero))) +
ggtitle("Promedio ingresos por semana por Edad y Género") +
xlab("Edad") +
ylab("Ingreso por semana") +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = c("blue", "red"), labels = c("Hombre", "Mujer")) +
theme_minimal()
>>>>>>> main/main
